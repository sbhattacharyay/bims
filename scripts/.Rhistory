View(totallyMissingBed)
totallyMissingBed$ftIdx[i]
featureLabels[[totallyMissingBed$ftIdx[i]]]
currRows <- which(completeFeatureSet$ptIdx == totallyMissingBed$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingBed$ftIdx[i]]])
currDF <- completeFeatureSet %>% filter(ptIdx == totallyMissingBed$ptIdx[i] & featureType == featureLabels[[totallyMissingBed$ftIdx[i]]])
length(currRows)
totallyMissingBed <- totallyMissingSet %>% filter(srIdx == 1)
for (i in 1:nrow(totallyMissingBed)){
currRows <- which(completeFeatureSet$ptIdx == totallyMissingBed$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingBed$ftIdx[i]]])
filtered_bedSet <- completeFeatureSet %>% drop_na(Bed) %>% filter(featureType == featureLabels[[totallyMissingBed$ftIdx[i]]])
completeFeatureSet[currRows,1] <- sample(x =filtered_bedSet$Bed,size = length(currRows),replace = TRUE)
}
showi <- completeFeatureSet %>% filter(ptIdx == 39 & featureType == "sma")
View(showi)
totallyMissingLE <- totallyMissingSet %>% filter(srIdx%in%c(2,5))
uniqLECombos <- unique(totallyMissingLE[,c('srIdx','ftIdx')])
LEmdls <- vector(mode = "list")
LEbxcx <- vector(mode = "list")
for (i in 1:nrow(uniqLECombos)){
filteredSet <- completeFeatureSet %>% drop_na(LA,RA) %>% filter(featureType == featureLabels[[uniqLECombos$ftIdx[i]]])
LA_bxcx <- boxcox(filteredSet$LA,standardize = TRUE)
RA_bxcx <- boxcox(filteredSet$RA,standardize = TRUE)
LEbxcx[[i]]<- list(LA_bxcx,RA_bxcx)
filteredSet$LA <- LA_bxcx$x.t
filteredSet$RA <- RA_bxcx$x.t
if (uniqLECombos$srIdx[i] == 2){
LEmdl <- lm(LA ~ RA, filteredSet)
} else {
LEmdl <- lm(RA ~ LA, filteredSet)
}
LEmdls[[i]] <- LEmdl
print(paste('combination no',i,'complete'))
}
i=1
currRows <- which(completeFeatureSet$ptIdx == totallyMissingLE$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingLE$ftIdx[i]]])
currDF <- completeFeatureSet %>% filter(ptIdx == totallyMissingLE$ptIdx[i] & featureType == featureLabels[[totallyMissingLE$ftIdx[i]]])
View(currDF)
uniqIdx <- which(uniqLECombos$srIdx == totallyMissingLE$srIdx[i] & uniqLECombos$ftIdx == totallyMissingLE$ftIdx[i])
curr_mdl <- LEmdls[[uniqIdx]]
curr_LA_bxcx <- LEbxcx[[uniqIdx]][[1]]
curr_RA_bxcx <- LEbxcx[[uniqIdx]][[2]]
for (i in 1:nrow(totallyMissingLE)){
currRows <- which(completeFeatureSet$ptIdx == totallyMissingLE$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingLE$ftIdx[i]]])
currDF <- completeFeatureSet %>% filter(ptIdx == totallyMissingLE$ptIdx[i] & featureType == featureLabels[[totallyMissingLE$ftIdx[i]]])
uniqIdx <- which(uniqLECombos$srIdx == totallyMissingLE$srIdx[i] & uniqLECombos$ftIdx == totallyMissingLE$ftIdx[i])
curr_mdl <- LEmdls[[uniqIdx]]
curr_LA_bxcx <- LEbxcx[[uniqIdx]][[1]]
curr_RA_bxcx <- LEbxcx[[uniqIdx]][[2]]
if (totallyMissingLE$srIdx[i] == 2){
currDF$RA <- predict(curr_RA_bxcx,newdata = currDF$RA)
tfOuts <- predict(curr_mdl,newdata = currDF)
Outs <- predict(curr_LA_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingLE$srIdx[i] == 5){
currDF$LA <- predict(curr_LA_bxcx,newdata = currDF$LA)
tfOuts <- predict(curr_mdl,newdata = currDF)
Outs <- predict(curr_RA_bxcx,newdata = tfOuts,inverse = TRUE)
}
completeFeatureSet[currRows,totallyMissingLE$srIdx[i]] <- Outs
}
rm(LEmdls)
View(totallyMissingLE)
showi <- completeFeatureSet %>% filter(ptIdx == 6 & featureType == "sma")
View(showi)
View(LE_bxcx)
rm(UEmdls,UEbxcx)
totallyMissingUE <- totallyMissingSet %>% filter(srIdx%in%c(3,4,6,7))
uniqUECombos <- unique(totallyMissingUE[,c('srIdx','ftIdx')])
UEmdls <- vector(mode = "list")
UEbxcx <- vector(mode = "list")
for (i in 1:nrow(uniqUECombos)){
if(uniqUECombos$srIdx[i] %in% c(3,4)) {
filteredSet <- completeFeatureSet %>% drop_na(LE,LW) %>% filter(featureType == featureLabels[[uniqUECombos$ftIdx[i]]])
# Apply Box Cox
LE_bxcx <- boxcox(filteredSet$LE,standardize = TRUE)
LW_bxcx <- boxcox(filteredSet$LW,standardize = TRUE)
UEbxcx[[i]]<- list(LE_bxcx,LW_bxcx)
filteredSet$LE <- LE_bxcx$x.t
filteredSet$LW <- LW_bxcx$x.t
if (uniqUECombos$srIdx[i] == 3) {
UEmdl <- lm(LE ~ LW, filteredSet)
} else {
UEmdl <- lm(LW ~ LE, filteredSet)
}
} else if (uniqUECombos$srIdx[i] %in% c(6,7)) {
filteredSet <- completeFeatureSet %>% drop_na(RE,RW) %>% filter(featureType == featureLabels[[uniqUECombos$ftIdx[i]]])
# Apply Box Cox
RE_bxcx <- boxcox(filteredSet$RE,standardize = TRUE)
RW_bxcx <- boxcox(filteredSet$RW,standardize = TRUE)
UEbxcx[[i]]<- list(RE_bxcx,RW_bxcx)
filteredSet$RE <- RE_bxcx$x.t
filteredSet$RW <- RW_bxcx$x.t
if (uniqUECombos$srIdx[i] == 6) {
UEmdl <- lm(RE ~ RW, filteredSet)
} else {
UEmdl <- lm(RW ~ RE, filteredSet)
}
}
UEmdls[[i]] <- UEmdl
print(paste('combination no',i,'complete'))
}
# Impute all totally missing upper extremity values possible with regression models:
for (i in 1:nrow(totallyMissingUE)){
currRows <- which(completeFeatureSet$ptIdx == totallyMissingUE$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingUE$ftIdx[i]]])
currDF <- completeFeatureSet %>% filter(ptIdx == totallyMissingUE$ptIdx[i] & featureType == featureLabels[[totallyMissingUE$ftIdx[i]]])
uniqIdx <- which(uniqUECombos$srIdx == totallyMissingUE$srIdx[i] & uniqUECombos$ftIdx == totallyMissingUE$ftIdx[i])
curr_UE_mdl <- UEmdls[[uniqIdx]]
curr_E_bxcx <- UEbxcx[[uniqIdx]][[1]]
curr_W_bxcx <- UEbxcx[[uniqIdx]][[2]]
if (totallyMissingUE$srIdx[i] == 3){
currDF$LW <- predict(curr_W_bxcx,newdata = currDF$LW)
tfOuts <- predict(curr_UE_mdl,newdata = currDF)
Outs <- predict(curr_E_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingUE$srIdx[i] == 4) {
currDF$LE <- predict(curr_E_bxcx,newdata = currDF$LE)
tfOuts <- predict(curr_UE_mdl,newdata = currDF)
Outs <- predict(curr_W_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingUE$srIdx[i] == 6) {
currDF$RW <- predict(curr_W_bxcx,newdata = currDF$RW)
tfOuts <- predict(curr_UE_mdl,newdata = currDF)
Outs <- predict(curr_E_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingUE$srIdx[i] == 7) {
currDF$RE <- predict(curr_E_bxcx,newdata = currDF$RE)
tfOuts <- predict(curr_UE_mdl,newdata = currDF)
Outs <- predict(curr_W_bxcx,newdata = tfOuts,inverse = TRUE)
}
completeFeatureSet[currRows,totallyMissingUE$srIdx[i]] <- Outs
}
rm(UEmdls,UEmdl,UEbxcx,curr_E_bxcx,curr_W_bxcx,curr_UE_mdl)
totallyMissingLE <- totallyMissingSet %>% filter(srIdx%in%c(2,5))
uniqLECombos <- unique(totallyMissingLE[,c('srIdx','ftIdx')])
LEmdls <- vector(mode = "list")
LEbxcx <- vector(mode = "list")
for (i in 1:nrow(uniqLECombos)){
filteredSet <- completeFeatureSet %>% drop_na(LA,RA) %>% filter(featureType == featureLabels[[uniqLECombos$ftIdx[i]]])
LA_bxcx <- boxcox(filteredSet$LA,standardize = TRUE)
RA_bxcx <- boxcox(filteredSet$RA,standardize = TRUE)
LEbxcx[[i]]<- list(LA_bxcx,RA_bxcx)
filteredSet$LA <- LA_bxcx$x.t
filteredSet$RA <- RA_bxcx$x.t
if (uniqLECombos$srIdx[i] == 2){
LEmdl <- lm(LA ~ RA, filteredSet)
} else {
LEmdl <- lm(RA ~ LA, filteredSet)
}
LEmdls[[i]] <- LEmdl
print(paste('combination no',i,'complete'))
}
for (i in 1:nrow(totallyMissingLE)){
currRows <- which(completeFeatureSet$ptIdx == totallyMissingLE$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingLE$ftIdx[i]]])
currDF <- completeFeatureSet %>% filter(ptIdx == totallyMissingLE$ptIdx[i] & featureType == featureLabels[[totallyMissingLE$ftIdx[i]]])
uniqIdx <- which(uniqLECombos$srIdx == totallyMissingLE$srIdx[i] & uniqLECombos$ftIdx == totallyMissingLE$ftIdx[i])
curr_mdl <- LEmdls[[uniqIdx]]
curr_LA_bxcx <- LEbxcx[[uniqIdx]][[1]]
curr_RA_bxcx <- LEbxcx[[uniqIdx]][[2]]
if (totallyMissingLE$srIdx[i] == 2){
currDF$RA <- predict(curr_RA_bxcx,newdata = currDF$RA)
tfOuts <- predict(curr_mdl,newdata = currDF)
Outs <- predict(curr_LA_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingLE$srIdx[i] == 5){
currDF$LA <- predict(curr_LA_bxcx,newdata = currDF$LA)
tfOuts <- predict(curr_mdl,newdata = currDF)
Outs <- predict(curr_RA_bxcx,newdata = tfOuts,inverse = TRUE)
}
completeFeatureSet[currRows,totallyMissingLE$srIdx[i]] <- Outs
}
rm(LEmdls,LEmdl,LEbxcx,curr_LA_bxcx,curr_RA_bxcx,curr_mdl)
# First separate out missing UE indices:
totallyMissingUE <- totallyMissingSet %>% filter(srIdx%in%c(3,4,6,7))
uniqUECombos <- unique(totallyMissingUE[,c('srIdx','ftIdx')])
UEmdls <- vector(mode = "list")
UEbxcx <- vector(mode = "list")
for (i in 1:nrow(uniqUECombos)){
if(uniqUECombos$srIdx[i] %in% c(3,4)) {
filteredSet <- completeFeatureSet %>% drop_na(LE,LW) %>% filter(featureType == featureLabels[[uniqUECombos$ftIdx[i]]])
# Apply Box Cox
LE_bxcx <- boxcox(filteredSet$LE,standardize = TRUE)
LW_bxcx <- boxcox(filteredSet$LW,standardize = TRUE)
UEbxcx[[i]]<- list(LE_bxcx,LW_bxcx)
filteredSet$LE <- LE_bxcx$x.t
filteredSet$LW <- LW_bxcx$x.t
if (uniqUECombos$srIdx[i] == 3) {
UEmdl <- lm(LE ~ LW, filteredSet)
} else {
UEmdl <- lm(LW ~ LE, filteredSet)
}
} else if (uniqUECombos$srIdx[i] %in% c(6,7)) {
filteredSet <- completeFeatureSet %>% drop_na(RE,RW) %>% filter(featureType == featureLabels[[uniqUECombos$ftIdx[i]]])
# Apply Box Cox
RE_bxcx <- boxcox(filteredSet$RE,standardize = TRUE)
RW_bxcx <- boxcox(filteredSet$RW,standardize = TRUE)
UEbxcx[[i]]<- list(RE_bxcx,RW_bxcx)
filteredSet$RE <- RE_bxcx$x.t
filteredSet$RW <- RW_bxcx$x.t
if (uniqUECombos$srIdx[i] == 6) {
UEmdl <- lm(RE ~ RW, filteredSet)
} else {
UEmdl <- lm(RW ~ RE, filteredSet)
}
}
UEmdls[[i]] <- UEmdl
print(paste('combination no',i,'complete'))
}
# Impute all totally missing upper extremity values possible with regression models:
for (i in 1:nrow(totallyMissingUE)){
currRows <- which(completeFeatureSet$ptIdx == totallyMissingUE$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingUE$ftIdx[i]]])
currDF <- completeFeatureSet %>% filter(ptIdx == totallyMissingUE$ptIdx[i] & featureType == featureLabels[[totallyMissingUE$ftIdx[i]]])
uniqIdx <- which(uniqUECombos$srIdx == totallyMissingUE$srIdx[i] & uniqUECombos$ftIdx == totallyMissingUE$ftIdx[i])
curr_UE_mdl <- UEmdls[[uniqIdx]]
curr_E_bxcx <- UEbxcx[[uniqIdx]][[1]]
curr_W_bxcx <- UEbxcx[[uniqIdx]][[2]]
if (totallyMissingUE$srIdx[i] == 3){
currDF$LW <- predict(curr_W_bxcx,newdata = currDF$LW)
tfOuts <- predict(curr_UE_mdl,newdata = currDF)
Outs <- predict(curr_E_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingUE$srIdx[i] == 4) {
currDF$LE <- predict(curr_E_bxcx,newdata = currDF$LE)
tfOuts <- predict(curr_UE_mdl,newdata = currDF)
Outs <- predict(curr_W_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingUE$srIdx[i] == 6) {
currDF$RW <- predict(curr_W_bxcx,newdata = currDF$RW)
tfOuts <- predict(curr_UE_mdl,newdata = currDF)
Outs <- predict(curr_E_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingUE$srIdx[i] == 7) {
currDF$RE <- predict(curr_E_bxcx,newdata = currDF$RE)
tfOuts <- predict(curr_UE_mdl,newdata = currDF)
Outs <- predict(curr_W_bxcx,newdata = tfOuts,inverse = TRUE)
}
completeFeatureSet[currRows,totallyMissingUE$srIdx[i]] <- Outs
}
rm(UEmdls,UEmdl,UEbxcx,curr_E_bxcx,curr_W_bxcx,curr_UE_mdl,LE_bxcx,LW_bxcx,RE_bxcx,RW_bxcx)
# Impute totally missing bed values by randomly sampling (with replacement) from available bed data of the same sensor:
totallyMissingBed <- totallyMissingSet %>% filter(srIdx == 1)
for (i in 1:nrow(totallyMissingBed)){
currRows <- which(completeFeatureSet$ptIdx == totallyMissingBed$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingBed$ftIdx[i]]])
filtered_bedSet <- completeFeatureSet %>% drop_na(Bed) %>% filter(featureType == featureLabels[[totallyMissingBed$ftIdx[i]]])
completeFeatureSet[currRows,1] <- sample(x =filtered_bedSet$Bed,size = length(currRows),replace = TRUE)
}
# Focus on exploratory analysis of prediction of ankle regression:
# smaFilter <- completeFeatureSet %>% filter(featureType == "sma")
# LA_bxcx <- boxcox(smaFilter$LA,standardize = TRUE)
# LE_bxcx <- boxcox(smaFilter$LE,standardize = TRUE)
# LW_bxcx <- boxcox(smaFilter$LW,standardize = TRUE)
# RA_bxcx <- boxcox(smaFilter$RA,standardize = TRUE)
# RE_bxcx <- boxcox(smaFilter$RE,standardize = TRUE)
# RW_bxcx <- boxcox(smaFilter$RW,standardize = TRUE)
#
# smaFilter$LA <- predict(LA_bxcx,newdata = smaFilter$LA)
# smaFilter$LE <- predict(LE_bxcx,newdata = smaFilter$LE)
# smaFilter$LW <- predict(LW_bxcx,newdata = smaFilter$LW)
# smaFilter$RA <- predict(RA_bxcx,newdata = smaFilter$RA)
# smaFilter$RE <- predict(RE_bxcx,newdata = smaFilter$RE)
# smaFilter$RW <- predict(RW_bxcx,newdata = smaFilter$RW)
#
# tempMdl1 <- lm(LA ~ RA,smaFilter)
# tempMdl2 <- lm(LA ~ LE + LW + LE:LW,smaFilter)
# Based on this analysis, I will use the other available Ankle to impute missing ankle values
# First separate out missing Lower Extremity indices:
totallyMissingLE <- totallyMissingSet %>% filter(srIdx%in%c(2,5))
uniqLECombos <- unique(totallyMissingLE[,c('srIdx','ftIdx')])
LEmdls <- vector(mode = "list")
LEbxcx <- vector(mode = "list")
for (i in 1:nrow(uniqLECombos)){
filteredSet <- completeFeatureSet %>% drop_na(LA,RA) %>% filter(featureType == featureLabels[[uniqLECombos$ftIdx[i]]])
LA_bxcx <- boxcox(filteredSet$LA,standardize = TRUE)
RA_bxcx <- boxcox(filteredSet$RA,standardize = TRUE)
LEbxcx[[i]]<- list(LA_bxcx,RA_bxcx)
filteredSet$LA <- LA_bxcx$x.t
filteredSet$RA <- RA_bxcx$x.t
if (uniqLECombos$srIdx[i] == 2){
LEmdl <- lm(LA ~ RA, filteredSet)
} else {
LEmdl <- lm(RA ~ LA, filteredSet)
}
LEmdls[[i]] <- LEmdl
print(paste('combination no',i,'complete'))
}
for (i in 1:nrow(totallyMissingLE)){
currRows <- which(completeFeatureSet$ptIdx == totallyMissingLE$ptIdx[i] & completeFeatureSet$featureType == featureLabels[[totallyMissingLE$ftIdx[i]]])
currDF <- completeFeatureSet %>% filter(ptIdx == totallyMissingLE$ptIdx[i] & featureType == featureLabels[[totallyMissingLE$ftIdx[i]]])
uniqIdx <- which(uniqLECombos$srIdx == totallyMissingLE$srIdx[i] & uniqLECombos$ftIdx == totallyMissingLE$ftIdx[i])
curr_mdl <- LEmdls[[uniqIdx]]
curr_LA_bxcx <- LEbxcx[[uniqIdx]][[1]]
curr_RA_bxcx <- LEbxcx[[uniqIdx]][[2]]
if (totallyMissingLE$srIdx[i] == 2){
currDF$RA <- predict(curr_RA_bxcx,newdata = currDF$RA)
tfOuts <- predict(curr_mdl,newdata = currDF)
Outs <- predict(curr_LA_bxcx,newdata = tfOuts,inverse = TRUE)
} else if (totallyMissingLE$srIdx[i] == 5){
currDF$LA <- predict(curr_LA_bxcx,newdata = currDF$LA)
tfOuts <- predict(curr_mdl,newdata = currDF)
Outs <- predict(curr_RA_bxcx,newdata = tfOuts,inverse = TRUE)
}
completeFeatureSet[currRows,totallyMissingLE$srIdx[i]] <- Outs
}
rm(LEmdls,LEmdl,LEbxcx,curr_LA_bxcx,curr_RA_bxcx,curr_mdl,LA_bxcx,RA_bxcx)
rm(filtered_bedSet)
View(completeFeatureSet)
1:n
length(featureLabels)
1:length(featureLabels)
View(showi)
i=1
j=1
currDF <- completeFeatureSet %>% filter(ptIdx == j & featureType == featureLabels[[i]])
View(currDF)
amelia_DF <- data.frame()
ncol(completeFeatureSet)
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(amelia_DF) <- names(completeFeatureSet)
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(curr_amelia_DF) <- names(completeFeatureSet)
View(curr_amelia_DF)
i=1
j=1
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(curr_amelia_DF) <- names(completeFeatureSet)
currDF <- completeFeatureSet %>% filter(ptIdx == j & featureType == featureLabels[[i]])
View(currDF)
1:7
View(currDF)
curr_bxcx <- boxcox(currDF[,k],standardize = TRUE)
k=1
curr_bxcx <- boxcox(currDF[,k],standardize = TRUE)
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(curr_amelia_DF) <- names(completeFeatureSet)
currDF <- completeFeatureSet %>% filter(ptIdx == j & featureType == featureLabels[[i]])
temp_bxcx <- vector(mode = "list")
# transform each stream with univariate boxcox
for (k in 1:7) {
curr_bxcx <- boxcox(currDF[,k],standardize = TRUE)
currDF[,k] <- curr_bxcx$x.t
temp_bxcx[[k]] <- curr_bxcx
}
amelia_bxcx[[i]] <- temp_bxcx
curr_amelia_DF <- rbind(curr_amelia_DF,currDF)
amelia_bxcx <- vector(mode = "list")
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(curr_amelia_DF) <- names(completeFeatureSet)
currDF <- completeFeatureSet %>% filter(ptIdx == j & featureType == featureLabels[[i]])
temp_bxcx <- vector(mode = "list")
# transform each stream with univariate boxcox
for (k in 1:7) {
curr_bxcx <- boxcox(currDF[,k],standardize = TRUE)
currDF[,k] <- curr_bxcx$x.t
temp_bxcx[[k]] <- curr_bxcx
}
amelia_bxcx[[i]] <- temp_bxcx
curr_amelia_DF <- rbind(curr_amelia_DF,currDF)
View(curr_amelia_DF)
i=1
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(curr_amelia_DF) <- names(completeFeatureSet)
for (j in 1:n){
currDF <- completeFeatureSet %>% filter(ptIdx == j & featureType == featureLabels[[i]])
temp_bxcx <- vector(mode = "list")
# transform each stream with univariate boxcox
for (k in 1:7) {
curr_bxcx <- boxcox(currDF[,k],standardize = TRUE)
currDF[,k] <- curr_bxcx$x.t
temp_bxcx[[k]] <- curr_bxcx
}
amelia_bxcx[[i]] <- temp_bxcx
curr_amelia_DF <- rbind(curr_amelia_DF,currDF)
}
View(curr_amelia_DF)
5759*7
5759*69
curr_amelia_DF <- curr_amelia_DF %>% select(-featureType)
View(curr_amelia_DF)
curr_amelia <- amelia(curr_amelia_DF, m = 9, ts = "timeCount", cs ="ptIdx",polytime=2)
curr_amelia$m
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(curr_amelia_DF) <- names(completeFeatureSet)
amelia_bxcx <- vector(mode = "list")
for (j in 1:n){
currDF <- completeFeatureSet %>% filter(ptIdx == j & featureType == featureLabels[[i]])
temp_bxcx <- vector(mode = "list")
# transform each stream with univariate boxcox
for (k in 1:7) {
curr_bxcx <- boxcox(currDF[,k],standardize = TRUE)
currDF[,k] <- curr_bxcx$x.t
temp_bxcx[[k]] <- curr_bxcx
}
amelia_bxcx[[j]] <- temp_bxcx
curr_amelia_DF <- rbind(curr_amelia_DF,currDF)
}
curr_amelia_DF <- curr_amelia_DF %>% select(-featureType)
curr_amelia <- amelia(curr_amelia_DF, m = 9, ts = "timeCount", cs ="ptIdx",polytime=2)
5759*69
curr_amelia$m
1:curr_amelia$m
j=1
heyyo <- curr_amelia$imputations[[j]]
View(heyyo)
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(curr_amelia_DF) <- names(completeFeatureSet)
amelia_bxcx <- vector(mode = "list")
for (j in 1:n){
currDF <- completeFeatureSet %>% filter(ptIdx == j & featureType == featureLabels[[i]])
temp_bxcx <- vector(mode = "list")
# transform each stream with univariate boxcox
for (k in 1:7) {
curr_bxcx <- boxcox(currDF[,k],standardize = TRUE)
currDF[,k] <- curr_bxcx$x.t
temp_bxcx[[k]] <- curr_bxcx
}
amelia_bxcx[[j]] <- temp_bxcx
curr_amelia_DF <- rbind(curr_amelia_DF,currDF)
}
curr_amelia_DF <- curr_amelia_DF %>% select(-featureType)
curr_amelia <- amelia(curr_amelia_DF, m = 9, ts = "timeCount", cs ="ptIdx",polytime=2)
View(amelia_bxcx)
l=1
currDF <- curr_amelia$imputations[[l]]
View(currDF)
subCurrDF <- currDF %>% filter(ptIdx == j)
temp_bxcx <- amelia_bxcx[[j]]
View(temp_bxcx)
k=1
curr_bxcx <- temp_bxcx[[k]]
View(curr_bxcx)
subCurrDF <- currDF %>% filter(ptIdx == j)
temp_bxcx <- amelia_bxcx[[j]]
View(subCurrDF)
curr_bxcx <- temp_bxcx[[k]]
subCurrDF[,k] <- predict(curr_bxcx,newdata = subCurrDF,inverse = TRUE)
loli<- predict(curr_bxcx,newdata = subCurrDF,inverse = TRUE)
View(loli)
loli<- predict(curr_bxcx,newdata = subCurrDF,inverse = TRUE)[,k]
currDF <- curr_amelia$imputations[[l]]
subCurrDF <- currDF %>% filter(ptIdx == j)
temp_bxcx <- amelia_bxcx[[j]]
curr_bxcx <- temp_bxcx[[k]]
subCurrDF[,k] <- predict(curr_bxcx,newdata = subCurrDF,inverse = TRUE)[,k]
for (k in 1:7) {
curr_bxcx <- temp_bxcx[[k]]
subCurrDF[,k] <- predict(curr_bxcx,newdata = subCurrDF,inverse = TRUE)[,k]
}
View(subCurrDF)
View(completeFeatureSet)
View(subCurrDF)
currDF <- curr_amelia$imputations[[l]]
subCurrDF <- currDF %>% filter(ptIdx == j)
temp_bxcx <- amelia_bxcx[[j]]
curr_bxcx <- temp_bxcx[[k]]
subCurrDF[,k] <- predict(curr_bxcx,newdata = subCurrDF[,k],inverse = TRUE)
View(subCurrDF)
subCurrDF <- currDF %>% filter(ptIdx == j)
temp_bxcx <- amelia_bxcx[[j]]
for (k in 1:7) {
curr_bxcx <- temp_bxcx[[k]]
subCurrDF[,k] <- predict(curr_bxcx,newdata = subCurrDF[,k],inverse = TRUE)
}
View(subCurrDF)
currRows <- which(currDF$ptIdx == j)
l=1
currDF <- curr_amelia$imputations[[l]]
for (j in 1:n){
currRows <- which(currDF$ptIdx == j)
subCurrDF <- currDF %>% filter(ptIdx == j)
temp_bxcx <- amelia_bxcx[[j]]
for (k in 1:7) {
curr_bxcx <- temp_bxcx[[k]]
subCurrDF[,k] <- predict(curr_bxcx,newdata = subCurrDF[,k],inverse = TRUE)
}
currDF[currRows,] <- subCurrDF
}
View(currDF)
View(completeFeatureSet)
featureLabels[[1]]
paste0(featureLabels[[i]],l,".csv")
fileName <- paste0(featureLabels[[i]],l,".csv")
file.path("../tfr_motion_feature_data/",fileName)
fileName <- paste0(featureLabels[[i]],l,".csv")
file.path("../tfr_motion_feature_data",fileName)
paste0(featureLabels[[i]],"_",l,".csv")
for (i in 1:length(featureLabels)){
curr_amelia_DF <- data.frame(matrix(ncol = ncol(completeFeatureSet), nrow = 0))
names(curr_amelia_DF) <- names(completeFeatureSet)
amelia_bxcx <- vector(mode = "list")
for (j in 1:n){
currDF <- completeFeatureSet %>% filter(ptIdx == j & featureType == featureLabels[[i]])
temp_bxcx <- vector(mode = "list")
# transform each stream with univariate boxcox
for (k in 1:7) {
curr_bxcx <- boxcox(currDF[,k],standardize = TRUE)
currDF[,k] <- curr_bxcx$x.t
temp_bxcx[[k]] <- curr_bxcx
}
amelia_bxcx[[j]] <- temp_bxcx
curr_amelia_DF <- rbind(curr_amelia_DF,currDF)
}
curr_amelia_DF <- curr_amelia_DF %>% select(-featureType)
curr_amelia <- amelia(curr_amelia_DF, m = 9, ts = "timeCount", cs ="ptIdx",polytime=2)
# Inverse transform all the imputations
for (l in 1:curr_amelia$m){
currDF <- curr_amelia$imputations[[l]]
for (j in 1:n){
currRows <- which(currDF$ptIdx == j)
subCurrDF <- currDF %>% filter(ptIdx == j)
temp_bxcx <- amelia_bxcx[[j]]
for (k in 1:7) {
curr_bxcx <- temp_bxcx[[k]]
subCurrDF[,k] <- predict(curr_bxcx,newdata = subCurrDF[,k],inverse = TRUE)
}
currDF[currRows,] <- subCurrDF
}
fileName <- paste0(featureLabels[[i]],"_",l,".csv")
write.csv(currDF,file.path("../tfr_motion_feature_data",fileName))
}
print(paste('Feature no.',i,'complete'))
}
