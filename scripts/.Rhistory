# Load and update clinical variable list
clinicalVariableList<-update_clinicalVariableList()
# Load Motion Features Organized by Time of Day (TOD)
if(!exists("tod_sensors")) {
tod_sensors<-readMat('../motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
}
# Load Motion Features Organized by Time from Recording (TFR)
if(!exists("tfr_sensors")) {
tfr_sensors<-readMat('../tfr_motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
}
# Organizing Features for both motion feature categorizations
tod_temp_var<-do.call(rbind,tod_sensors)
tfr_temp_var<-do.call(rbind,tfr_sensors)
# ranked_temp_var<-lapply(temp_var, function(x) t(apply(x,1,sort,decreasing = TRUE)))
# fft_temp_var<-lapply(temp_var, function(x) abs(t(mvfft(t(x)))))
tod_motion_features <- get_motion_features(tod_temp_var)
tfr_motion_features <- get_motion_features(tfr_temp_var)
# Load transformed covariates for both TOD and TFR
tod_tf_covariates<-load_tf_patient_covariates('../motion_feature_data/tf_patient_covariates.csv')
tfr_tf_covariates<-load_tf_patient_covariates('../tfr_motion_feature_data/tf_patient_covariates.csv')
# Split for k-fold cross validation for discharge predictions:
k<-5
cvIdx<-cross_val_splits(patient_clinical_data,k)
for (i in 1:length(cvIdx)){
currTestIdx<-cvIdx[[as.character(i)]]
currTrainIdx<-seq(nrow(patient_clinical_data))[-currTestIdx]
# Convert numeric to logical indexing
logicalTotal <- rep(FALSE,nrow(patient_clinical_data))
logicalTest <- logicalTotal
logicalTest[currTestIdx] <- TRUE
logicalTrain <- !logicalTest
# Extract training and testing covariates based on current split
train_tfr_tf_covariates<-tfr_tf_covariates[currTrainIdx,]
test_tfr_tf_covariates<-tfr_tf_covariates[currTestIdx,]
train_tod_tf_covariates<-tod_tf_covariates[currTrainIdx,]
test_tod_tf_covariates<-tod_tf_covariates[currTestIdx,]
# Perform LOL on training data
r<-3
Y<-as.factor(patient_clinical_data$gose)
tod_GOSE_LOL<-cv_lol_project_motion_features(tod_motion_features,Y,r,logicalTrain)
tfr_GOSE_LOL<-cv_lol_project_motion_features(tfr_motion_features,Y,r,logicalTrain)
Y<-as.factor(patient_clinical_data$favorable)
tod_fav_LOL<-cv_lol_project_motion_features(tod_motion_features,Y,r,logicalTrain)
tfr_fav_LOL<-cv_lol_project_motion_features(tfr_motion_features,Y,r,logicalTrain)
Y<-as.factor(patient_clinical_data$death)
tod_death_LOL<-cv_lol_project_motion_features(tod_motion_features,Y,r,logicalTrain)
tfr_death_LOL<-cv_lol_project_motion_features(tfr_motion_features,Y,r,logicalTrain)
# Prepare training covariates
train_tod_GOSE_CV<- prepare_training_covariates(tod_GOSE_LOL,train_tod_tf_covariates,TRUE)
train_tod_fav_CV<-  prepare_training_covariates(tod_fav_LOL,train_tod_tf_covariates,TRUE)
train_tod_death_CV<-prepare_training_covariates(tod_death_LOL,train_tod_tf_covariates,FALSE)
train_tfr_GOSE_CV<- prepare_training_covariates(tfr_GOSE_LOL,train_tfr_tf_covariates,TRUE)
train_tfr_fav_CV<-  prepare_training_covariates(tfr_fav_LOL,train_tfr_tf_covariates,TRUE)
train_tfr_death_CV<-prepare_training_covariates(tfr_death_LOL,train_tfr_tf_covariates,FALSE)
# Prepare testing covariates
test_tod_GOSE_CV<- prepare_testing_covariates(tod_motion_features,tod_GOSE_LOL,test_tod_tf_covariates,currTestIdx,TRUE)
test_tod_fav_CV<-  prepare_testing_covariates(tod_motion_features,tod_fav_LOL,test_tod_tf_covariates,currTestIdx,TRUE)
test_tod_death_CV<-prepare_testing_covariates(tod_motion_features,tod_death_LOL,test_tod_tf_covariates,currTestIdx,FALSE)
test_tfr_GOSE_CV<- prepare_testing_covariates(tfr_motion_features,tfr_GOSE_LOL,test_tfr_tf_covariates,currTestIdx,TRUE)
test_tfr_fav_CV<-  prepare_testing_covariates(tfr_motion_features,tfr_fav_LOL,test_tfr_tf_covariates,currTestIdx,TRUE)
test_tfr_death_CV<-prepare_testing_covariates(tfr_motion_features,tfr_death_LOL,test_tfr_tf_covariates,currTestIdx,FALSE)
# Train GLM on training data
}
Y<-as.factor(patient_clinical_data$favorable)
Y
train_CV<-train_tod_fav_CV
Y<-as.factor(patient_clinical_data$favorable)
gose_logical=TRUE
data = train_CV$band_power_train_cv
View(data)
currTrainIdx
plot(currTrainIdx)
Y[currTrainIdx]
bp_mdl<-glm(Y[currTrainIdx] ~ Age + Sex + GCS_en + MF.1 + MF.2 + MF.3,data = train_CV$band_power_train_cv,family = binomial)
as.data.frame(train_CV$band_power_train_cv)
yoopi<-as.data.frame(train_CV$band_power_train_cv)
View(yoopi)
bp_mdl<-glm(Y[currTrainIdx] ~ Age + Sex + GCS_en + MF.1 + MF.2 + MF.3,data = yoopi,family = binomial)
View(bp_mdl)
bp_mdl<-glm(Y[currTrainIdx] ~.,data = yoopi,family = binomial("logit"),maxit=100)
bp_mdl
bp_mdl<-glm(Y[currTrainIdx] ~ Age + Sex + GCS_en + MF.1 + MF.2 + MF.3,data = yoopi,family = binomial("logit"),maxit=100)
bp_mdl
yoopi <- cbind(as.data.frame(train_CV$band_power_train_cv),Y[currTrainIdx])
View(yoopi)
bp_mdl<-glm(Y[currTrainIdx] ~ Age + Sex + GCS_en + MF.1 + MF.2 + MF.3,data = yoopi,family = binomial("logit"),maxit=100)
yoopi
bp_mdl
summary(bp_mdl)
plot(yoopi$MF.1,yoopi$`Y[currTrainIdx]`)
bp_mdl<-glm(`Y[currTrainIdx]` ~ Age + Sex + GCS_en + MF.1 + MF.2 + MF.3,data = yoopi,family = binomial("logit"),maxit=100)
summary(bp_mdl)
bp_mdl<-glm(`Y[currTrainIdx]` ~ MF.1 + MF.2 + MF.3,data = yoopi,family = binomial("logit"),maxit=100)
summary(bp_mdl)
Y[currTrainIdx]
bp_mdl<-glm(yoopi$`Y[currTrainIdx]` ~ yoopi$MF.1 + yoopi$MF.2 + yoopi$MF.3,family = binomial("logit"),maxit=100)
bp_mdl<-glm(yoopi$`Y[currTrainIdx]` ~ yoopi$MF.1,family = binomial("logit"),maxit=100)
bp_md
bp_mdl
summary(bp_mdl)
valData$smooth = predict(bp_mdl,yoopi$MF.1,type = "response")
valData$smooth = predict(bp_mdl,yoopi$MF.1,type = "response")
valData$smooth = predict(bp_mdl,cbind(rep(1,48),yoopi$MF.1),type = "response")
valData$smooth = predict(bp_mdl,cbind(rep(1,48),yoopi$MF.1),type = "response")
valData$smooth = predict(bp_mdl,cbind(rep(1,48),yoopi$MF.1),type = "response")
cbind(rep(1,48),yoopi$MF.1)
as.data.frame(cbind(rep(1,48),yoopi$MF.1))
valData$smooth = predict(bp_mdl,as.data.frame(cbind(rep(1,48),yoopi$MF.1)),type = "response")
valData <- data.frame(yoopi$MF.1)
valData$smooth = predict(bp_mdl,as.data.frame(cbind(rep(1,48),yoopi$MF.1)),type = "response")
View(valData)
lines(smooth~yoopi.MF.1,valData)
lines(smooth+1~yoopi.MF.1,valData)
plot(smooth+1~yoopi.MF.1,valData)
lines(smooth+1~yoopi.MF.1,valData)
lines(sort(smooth+1~yoopi.MF.1),valData)
valdat <- data.frame(hp=seq(min(yoopi$MF.1), max(yoopi$MF.1),len=100))
View(valData)
View(valdat)
valdat <- data.frame(hp=seq(min(yoopi$MF.1), max(yoopi$MF.1),len=100))
valdat <- data.frame(MF.1=seq(min(yoopi$MF.1), max(yoopi$MF.1),len=100))
valdat <- data.frame(MF.1=seq(min(yoopi$MF.1), max(yoopi$MF.1),len=100))
valdat$y <- predict(bp_mdl,newdata = valdat,type = "response")
valdat <- data.frame(MF.1=seq(min(yoopi$MF.1), max(yoopi$MF.1),len=48))
valdat$y <- predict(bp_mdl,newdata = valdat,type = "response")
plot(valdat$y~valdat$MF.1)
lines(valdat$y~valdat$MF.1)
library('glmnet')
shmppo<-train_CV$band_power_train_cv
glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0)
Y[currTrainIdx]
as.factor(Y[currTrainIdx])
glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
bp_glm<-glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
bp_glm<-glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
plot(hp_glm)
plot(bp_glm)
plot(bp_glm,"lambdas")
plot(bp_glm,"lambda")
bp_glm<-glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
fe_glm<-glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
fp_glm<-glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
mf_glm<-glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
sm_glm<-glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
wv_glm<-glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = 0,family = "binomial")
tempList<-list(bp_glm,fe_glm,fp_glm,mf_glm,sm_glm,wv_glm)
View(tempList)
names(tempList)<-c("bp_glm","fe_glm","fp_glm","mf_glm","sm_glm","wv_glm")
source('./functions/train_GLM.R')
source('./functions/train_GLM.R')
tod_GOSE_GLM <- train_GLM(train_tod_GOSE_CV,Y,currTrainIdx)
tfr_GOSE_GLM <- train_GLM(train_tfr_GOSE_CV,Y,currTrainIdx)
tod_fav_GLM <- train_GLM(train_tod_fav_CV,Y,currTrainIdx)
tfr_fav_GLM <- train_GLM(train_tfr_fav_CV,Y,currTrainIdx)
Y<-as.factor(patient_clinical_data$favorable)
tod_GOSE_GLM <- train_GLM(train_tod_GOSE_CV,Y,currTrainIdx)
tfr_GOSE_GLM <- train_GLM(train_tfr_GOSE_CV,Y,currTrainIdx)
tod_fav_GLM <- train_GLM(train_tod_fav_CV,Y,currTrainIdx)
tfr_fav_GLM <- train_GLM(train_tfr_fav_CV,Y,currTrainIdx)
Y<-as.factor(patient_clinical_data$death)
tod_death_GLM <- train_GLM(train_tod_death_CV,Y,currTrainIdx)
tfr_death_GLM <- train_GLM(train_tfr_death_CV,Y,currTrainIdx)
Y<-as.factor(patient_clinical_data$death)
tod_death_GLM <- train_GLM(train_tod_death_CV,Y,currTrainIdx)
tfr_death_GLM <- train_GLM(train_tfr_death_CV,Y,currTrainIdx)
X_GLM<-tod_death_GLM
CV_set=train_tod_death_CV
bp_pred<-predict(X_GLM$bp_glm,newx = CV_set,type = "response",s = "lambda.1se")
bp_pred<-predict(X_GLM$bp_glm,newx = CV_set,type = "response")
predict(X_GLM$bp_glm,newx = CV_set,type = "response")
predict(X_GLM$bp_glm,newx = CV_set$band_power_train_cv,type = "response")
predict(X_GLM$bp_glm,newx = CV_set$band_power_train_cv,type = "response",s="lambda.1se")
predict(X_GLM$bp_glm,newx = CV_set$band_power_train_cv,type = "response",s="lambda.min")
predict(X_GLM$bp_glm,newx = CV_set$band_power_train_cv,type = "response")
heyyo<-predict(X_GLM$bp_glm,newx = CV_set$band_power_train_cv,type = "response")
View(heyyo)
X_GLM$bp_glm$lambda
library(doMC)
install.packages('doMC')
install.packages("doParallel")
train_GLM<-function(train_CV,Y,currTrainIdx,a,k){
bp_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc")
fe_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc")
fp_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc")
mf_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc")
sm_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc")
wv_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc")
tempList<-list(bp_glm,fe_glm,fp_glm,mf_glm,sm_glm,wv_glm)
names(tempList)<-c("bp_glm","fe_glm","fp_glm","mf_glm","sm_glm","wv_glm")
return(tempList)
}
train_GLM<-function(train_CV,Y,currTrainIdx,a,k){
bp_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
fe_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
fp_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
mf_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
sm_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
wv_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
tempList<-list(bp_glm,fe_glm,fp_glm,mf_glm,sm_glm,wv_glm)
names(tempList)<-c("bp_glm","fe_glm","fp_glm","mf_glm","sm_glm","wv_glm")
return(tempList)
}
length(currTrainIdx)
Y<-as.factor(patient_clinical_data$favorable)
tod_GOSE_GLM <- train_GLM(train_tod_GOSE_CV,Y,currTrainIdx,0,length(currTrainIdx))
tfr_GOSE_GLM <- train_GLM(train_tfr_GOSE_CV,Y,currTrainIdx,0,length(currTrainIdx))
tod_fav_GLM <- train_GLM(train_tod_fav_CV,Y,currTrainIdx,0,length(currTrainIdx))
tfr_fav_GLM <- train_GLM(train_tfr_fav_CV,Y,currTrainIdx,0,length(currTrainIdx))
Y<-as.factor(patient_clinical_data$death)
tod_death_GLM <- train_GLM(train_tod_death_CV,Y,currTrainIdx,0,length(currTrainIdx))
tfr_death_GLM <- train_GLM(train_tfr_death_CV,Y,currTrainIdx,0,length(currTrainIdx))
warnings()
Y<-as.factor(patient_clinical_data$favorable)
tod_GOSE_GLM <- train_GLM(train_tod_GOSE_CV,Y,currTrainIdx,0,5)
tfr_GOSE_GLM <- train_GLM(train_tfr_GOSE_CV,Y,currTrainIdx,0,5)
tod_fav_GLM <- train_GLM(train_tod_fav_CV,Y,currTrainIdx,0,5)
tfr_fav_GLM <- train_GLM(train_tfr_fav_CV,Y,currTrainIdx,0,5)
Y<-as.factor(patient_clinical_data$death)
tod_death_GLM <- train_GLM(train_tod_death_CV,Y,currTrainIdx,0,5)
tfr_death_GLM <- train_GLM(train_tfr_death_CV,Y,currTrainIdx,0,5)
train_GLM<-function(train_CV,Y,currTrainIdx,a,k){
bp_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
fe_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
fp_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
mf_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
sm_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
wv_glm<-cv.glmnet(train_CV$band_power_train_cv,Y[currTrainIdx],alpha = a,family = "binomial",type.measure = "auc",nfolds=k)
tempList<-list(bp_glm,fe_glm,fp_glm,mf_glm,sm_glm,wv_glm)
names(tempList)<-c("bp_glm","fe_glm","fp_glm","mf_glm","sm_glm","wv_glm")
return(tempList)
}
Y<-as.factor(patient_clinical_data$favorable)
tod_GOSE_GLM <- train_GLM(train_tod_GOSE_CV,Y,currTrainIdx,0,4)
tfr_GOSE_GLM <- train_GLM(train_tfr_GOSE_CV,Y,currTrainIdx,0,4)
tod_fav_GLM <- train_GLM(train_tod_fav_CV,Y,currTrainIdx,0,4)
tfr_fav_GLM <- train_GLM(train_tfr_fav_CV,Y,currTrainIdx,0,4)
Y<-as.factor(patient_clinical_data$death)
tod_death_GLM <- train_GLM(train_tod_death_CV,Y,currTrainIdx,0,4)
tfr_death_GLM <- train_GLM(train_tfr_death_CV,Y,currTrainIdx,0,4)
Y<-as.factor(patient_clinical_data$favorable)
tod_GOSE_GLM <- train_GLM(train_tod_GOSE_CV,Y,currTrainIdx,0,)
tfr_GOSE_GLM <- train_GLM(train_tfr_GOSE_CV,Y,currTrainIdx,0,4)
tod_fav_GLM <- train_GLM(train_tod_fav_CV,Y,currTrainIdx,0,4)
tfr_fav_GLM <- train_GLM(train_tfr_fav_CV,Y,currTrainIdx,0,4)
Y<-as.factor(patient_clinical_data$death)
tod_death_GLM <- train_GLM(train_tod_death_CV,Y,currTrainIdx,0,4)
tfr_death_GLM <- train_GLM(train_tfr_death_CV,Y,currTrainIdx,0,4)
Y<-as.factor(patient_clinical_data$favorable)
tod_GOSE_GLM <- train_GLM(train_tod_GOSE_CV,Y,currTrainIdx,0,4)
tfr_GOSE_GLM <- train_GLM(train_tfr_GOSE_CV,Y,currTrainIdx,0,4)
tod_fav_GLM <- train_GLM(train_tod_fav_CV,Y,currTrainIdx,0,4)
tfr_fav_GLM <- train_GLM(train_tfr_fav_CV,Y,currTrainIdx,0,4)
Y<-as.factor(patient_clinical_data$death)
tod_death_GLM <- train_GLM(train_tod_death_CV,Y,currTrainIdx,0,4)
tfr_death_GLM <- train_GLM(train_tfr_death_CV,Y,currTrainIdx,0,4)
X_GLM <- tod_death_GLM$bp_glm
bp_pred<-predict(X_GLM$bp_glm,newx = CV_set,type = "response")
bp_pred<-predict(X_GLM,newx = CV_set,type = "response")
X_GLM
CV_set
(X_GLM,newx = CV_set$band_power_train_cv ,type = "response",s=)
bp_pred<-predict(X_GLM,newx = CV_set$band_power_train_cv ,type = "response",s=)
CV_set$band_power_train_cv
bp_pred<-predict(X_GLM,newx = CV_set$band_power_train_cv,type = "response",s="lambda.1se")
View(bp_pred)
bp_pred<-predict(X_GLM,newx = CV_set$band_power_train_cv,type = "response",s="lambda.min")
X_GLM <- tod_death_GLM
View(train_tfr_GOSE_CV)
bp_pred<-predict(X_GLM$bp_glm,newx = CV_set$band_power_train_cv,type = "response",s="lambda.min")
fe_pred<-predict(X_GLM$fe_glm,newx = CV_set$freq_entropy_train_cv,type = "response",s="lambda.min")
fp_pred<-predict(X_GLM$fp_glm,newx = CV_set$freq_pairs_train_cv,type = "response",s="lambda.min")
mf_pred<-predict(X_GLM$mf_glm,newx = CV_set$med_freq_train_cv,type = "response",s="lambda.min")
sm_pred<-predict(X_GLM$sm_glm,newx = CV_set$sma_train_cv,type = "response",s="lambda.min")
wv_pred<-predict(X_GLM$wv_glm,newx = CV_set$wavelets_train_cv,type = "response",s="lambda.min")
View(wv_pred)
View(bp_pred)
View(fe_pred)
View(fp_glm)
View(fp_pred)
X_GLM<-tod_death_GLM
CV_set<-test_tod_death_CV
IdxSet<-currTrainIdx
Y[IdxSet]
tempDF<-as.data.frame(cbind(Y[IdxSet],bp_pred,fe_pred,fp_pred,mf_pred,sm_pred,wv_pred))
View(tempDF)
tempDF<-cbind(Y[IdxSet],as.data.frame(bp_pred,fe_pred,fp_pred,mf_pred,sm_pred,wv_pred))
View(tempDF)
tempDF<-cbind(Y[IdxSet],as.data.frame(cbind(bp_pred,fe_pred,fp_pred,mf_pred,sm_pred,wv_pred)))
View(tempDF)
tempDF<-cbind(Y[IdxSet],as.data.frame(cbind(bp_pred,fe_pred,fp_pred,mf_pred,sm_pred,wv_pred)))
colnames(tempDF)<-c("ground_truth","bp_pred","fe_pred","fp_pred","mf_pred","sm_pred","wv_pred")
View(tempDF)
predict_GLM<-function(X_GLM,CV_set,Y,IdxSet,train_logical){
if (train_logical == TRUE){
bp_pred<-predict(X_GLM$bp_glm,newx = CV_set$band_power_train_cv,type = "response",s="lambda.min")
fe_pred<-predict(X_GLM$fe_glm,newx = CV_set$freq_entropy_train_cv,type = "response",s="lambda.min")
fp_pred<-predict(X_GLM$fp_glm,newx = CV_set$freq_pairs_train_cv,type = "response",s="lambda.min")
mf_pred<-predict(X_GLM$mf_glm,newx = CV_set$med_freq_train_cv,type = "response",s="lambda.min")
sm_pred<-predict(X_GLM$sm_glm,newx = CV_set$sma_train_cv,type = "response",s="lambda.min")
wv_pred<-predict(X_GLM$wv_glm,newx = CV_set$wavelets_train_cv,type = "response",s="lambda.min")
} else {
bp_pred<-predict(X_GLM$bp_glm,newx = CV_set$band_power_test_cv,type = "response",s="lambda.min")
fe_pred<-predict(X_GLM$fe_glm,newx = CV_set$freq_entropy_test_cv,type = "response",s="lambda.min")
fp_pred<-predict(X_GLM$fp_glm,newx = CV_set$freq_pairs_test_cv,type = "response",s="lambda.min")
mf_pred<-predict(X_GLM$mf_glm,newx = CV_set$med_freq_test_cv,type = "response",s="lambda.min")
sm_pred<-predict(X_GLM$sm_glm,newx = CV_set$sma_test_cv,type = "response",s="lambda.min")
wv_pred<-predict(X_GLM$wv_glm,newx = CV_set$wavelets_test_cv,type = "response",s="lambda.min")
}
tempDF<-cbind(Y[IdxSet],as.data.frame(cbind(bp_pred,fe_pred,fp_pred,mf_pred,sm_pred,wv_pred)))
colnames(tempDF)<-c("ground_truth","bp_pred","fe_pred","fp_pred","mf_pred","sm_pred","wv_pred")
return(tempDF)
}
Y<-as.factor(patient_clinical_data$favorable)
tod_GOSE_self_val <- predict_GLM(tod_GOSE_GLM,train_tod_GOSE_CV,Y,currTrainIdx,TRUE)
tfr_GOSE_self_val <- predict_GLM(tfr_GOSE_GLM,train_tfr_GOSE_CV,Y,currTrainIdx,TRUE)
tod_fav_self_val <- predict_GLM(tod_fav_GLM,train_tod_fav_CV,Y,currTrainIdx,TRUE)
tfr_fav_self_val <- predict_GLM(tfr_fav_GLM,train_tfr_fav_CV,Y,currTrainIdx,TRUE)
Y<-as.factor(patient_clinical_data$death)
tod_death_self_val <- predict_GLM(tod_death_GLM,train_tod_death_CV,Y,currTrainIdx,TRUE)
tfr_death_self_val <- predict_GLM(tfr_death_GLM,train_tfr_death_CV,Y,currTrainIdx,TRUE)
# Predict outcomes for testing data
View(tfr_death_self_val)
Y<-as.factor(patient_clinical_data$favorable)
tod_GOSE_test_val <- predict_GLM(tod_GOSE_GLM,test_tod_GOSE_CV,Y,currTestIdx,FALSE)
tfr_GOSE_test_val <- predict_GLM(tfr_GOSE_GLM,test_tfr_GOSE_CV,Y,currTestIdx,FALSE)
tod_fav_test_val <- predict_GLM(tod_fav_GLM,test_tod_fav_CV,Y,currTestIdx,FALSE)
tfr_fav_test_val <- predict_GLM(tfr_fav_GLM,test_tfr_fav_CV,Y,currTestIdx,FALSE)
Y<-as.factor(patient_clinical_data$death)
tod_death_test_val <- predict_GLM(tod_death_GLM,test_tod_death_CV,Y,currTestIdx,FALSE)
tfr_death_test_val <- predict_GLM(tfr_death_GLM,test_tfr_death_CV,Y,currTestIdx,FALSE)
View(tfr_fav_test_val)
empty_list <- vector(mode = "list", length = k)
View(empty_list)
self_val_predictionsDis[[1]] <- 'hey'
val_predictionsDis <- vector(mode = "list", length = k)
test_val_predictionsDis <- vector(mode = "list", length = k)
self_val_predictionsDis <- vector(mode = "list", length = k)
test_val_predictionsDis <- vector(mode = "list", length = k)
self_val_predictionsDis[[1]] <- 'hey'
View(self_val_predictionsDis)
smooch<-   <- list(tod_GOSE_self_val,tfr_GOSE_self_val,tod_fav_self_val,tfr_fav_self_val,tod_death_self_val,tfr_death_self_val)
smooch<- list(tod_GOSE_self_val,tfr_GOSE_self_val,tod_fav_self_val,tfr_fav_self_val,tod_death_self_val,tfr_death_self_val)
smooch
temp_self_val_list<- list(tod_GOSE_self_val,tfr_GOSE_self_val,tod_fav_self_val,tfr_fav_self_val,tod_death_self_val,tfr_death_self_val)
names(temp_self_val_list)<-c("tod_GOSE_self_val","tfr_GOSE_self_val","tod_fav_self_val","tfr_fav_self_val","tod_death_self_val","tfr_death_self_val")
self_val_predictionsDis[[i]]
temp_self_val_list<- list(tod_GOSE_self_val,tfr_GOSE_self_val,tod_fav_self_val,tfr_fav_self_val,tod_death_self_val,tfr_death_self_val)
names(temp_self_val_list)<-c("tod_GOSE_self_val","tfr_GOSE_self_val","tod_fav_self_val","tfr_fav_self_val","tod_death_self_val","tfr_death_self_val")
self_val_predictionsDis[[i]]<-temp_self_val_list
View(self_val_predictionsDis)
for (i in 1:length(cvIdx)) {
currTestIdx <- cvIdx[[as.character(i)]]
currTrainIdx <- seq(nrow(patient_clinical_data))[-currTestIdx]
# Convert numeric to logical indexing
logicalTotal <- rep(FALSE, nrow(patient_clinical_data))
logicalTest <- logicalTotal
logicalTest[currTestIdx] <- TRUE
logicalTrain <- !logicalTest
# Extract training and testing covariates based on current split
train_tfr_tf_covariates <- tfr_tf_covariates[currTrainIdx, ]
test_tfr_tf_covariates <- tfr_tf_covariates[currTestIdx, ]
train_tod_tf_covariates <- tod_tf_covariates[currTrainIdx, ]
test_tod_tf_covariates <- tod_tf_covariates[currTestIdx, ]
# Perform LOL on training data
r <- 3
Y <- as.factor(patient_clinical_data$gose)
tod_GOSE_LOL <-
cv_lol_project_motion_features(tod_motion_features, Y, r, logicalTrain)
tfr_GOSE_LOL <-
cv_lol_project_motion_features(tfr_motion_features, Y, r, logicalTrain)
Y <- as.factor(patient_clinical_data$favorable)
tod_fav_LOL <-
cv_lol_project_motion_features(tod_motion_features, Y, r, logicalTrain)
tfr_fav_LOL <-
cv_lol_project_motion_features(tfr_motion_features, Y, r, logicalTrain)
Y <- as.factor(patient_clinical_data$death)
tod_death_LOL <-
cv_lol_project_motion_features(tod_motion_features, Y, r, logicalTrain)
tfr_death_LOL <-
cv_lol_project_motion_features(tfr_motion_features, Y, r, logicalTrain)
# Prepare training covariates
train_tod_GOSE_CV <-
prepare_training_covariates(tod_GOSE_LOL, train_tod_tf_covariates, TRUE)
train_tod_fav_CV <-
prepare_training_covariates(tod_fav_LOL, train_tod_tf_covariates, TRUE)
train_tod_death_CV <-
prepare_training_covariates(tod_death_LOL, train_tod_tf_covariates, FALSE)
train_tfr_GOSE_CV <-
prepare_training_covariates(tfr_GOSE_LOL, train_tfr_tf_covariates, TRUE)
train_tfr_fav_CV <-
prepare_training_covariates(tfr_fav_LOL, train_tfr_tf_covariates, TRUE)
train_tfr_death_CV <-
prepare_training_covariates(tfr_death_LOL, train_tfr_tf_covariates, FALSE)
# Prepare testing covariates
test_tod_GOSE_CV <-
prepare_testing_covariates(tod_motion_features,
tod_GOSE_LOL,
test_tod_tf_covariates,
currTestIdx,
TRUE)
test_tod_fav_CV <-
prepare_testing_covariates(tod_motion_features,
tod_fav_LOL,
test_tod_tf_covariates,
currTestIdx,
TRUE)
test_tod_death_CV <-
prepare_testing_covariates(tod_motion_features,
tod_death_LOL,
test_tod_tf_covariates,
currTestIdx,
FALSE)
test_tfr_GOSE_CV <-
prepare_testing_covariates(tfr_motion_features,
tfr_GOSE_LOL,
test_tfr_tf_covariates,
currTestIdx,
TRUE)
test_tfr_fav_CV <-
prepare_testing_covariates(tfr_motion_features,
tfr_fav_LOL,
test_tfr_tf_covariates,
currTestIdx,
TRUE)
test_tfr_death_CV <-
prepare_testing_covariates(tfr_motion_features,
tfr_death_LOL,
test_tfr_tf_covariates,
currTestIdx,
FALSE)
# Train GLM on training data
Y <- as.factor(patient_clinical_data$favorable)
tod_GOSE_GLM <- train_GLM(train_tod_GOSE_CV, Y, currTrainIdx, 0, 4)
tfr_GOSE_GLM <- train_GLM(train_tfr_GOSE_CV, Y, currTrainIdx, 0, 4)
tod_fav_GLM <- train_GLM(train_tod_fav_CV, Y, currTrainIdx, 0, 4)
tfr_fav_GLM <- train_GLM(train_tfr_fav_CV, Y, currTrainIdx, 0, 4)
Y <- as.factor(patient_clinical_data$death)
tod_death_GLM <- train_GLM(train_tod_death_CV, Y, currTrainIdx, 0, 4)
tfr_death_GLM <- train_GLM(train_tfr_death_CV, Y, currTrainIdx, 0, 4)
# Self-validate the GLM models on training data
Y <- as.factor(patient_clinical_data$favorable)
tod_GOSE_self_val <-
predict_GLM(tod_GOSE_GLM, train_tod_GOSE_CV, Y, currTrainIdx, TRUE)
tfr_GOSE_self_val <-
predict_GLM(tfr_GOSE_GLM, train_tfr_GOSE_CV, Y, currTrainIdx, TRUE)
tod_fav_self_val <-
predict_GLM(tod_fav_GLM, train_tod_fav_CV, Y, currTrainIdx, TRUE)
tfr_fav_self_val <-
predict_GLM(tfr_fav_GLM, train_tfr_fav_CV, Y, currTrainIdx, TRUE)
Y <- as.factor(patient_clinical_data$death)
tod_death_self_val <-
predict_GLM(tod_death_GLM, train_tod_death_CV, Y, currTrainIdx, TRUE)
tfr_death_self_val <-
predict_GLM(tfr_death_GLM, train_tfr_death_CV, Y, currTrainIdx, TRUE)
temp_self_val_list <-
list(
tod_GOSE_self_val,
tfr_GOSE_self_val,
tod_fav_self_val,
tfr_fav_self_val,
tod_death_self_val,
tfr_death_self_val
)
names(temp_self_val_list) <-
c(
"tod_GOSE_self_val",
"tfr_GOSE_self_val",
"tod_fav_self_val",
"tfr_fav_self_val",
"tod_death_self_val",
"tfr_death_self_val"
)
self_val_predictionsDis[[i]] <- temp_self_val_list
# Predict outcomes for testing data
Y <- as.factor(patient_clinical_data$favorable)
tod_GOSE_test_val <-
predict_GLM(tod_GOSE_GLM, test_tod_GOSE_CV, Y, currTestIdx, FALSE)
tfr_GOSE_test_val <-
predict_GLM(tfr_GOSE_GLM, test_tfr_GOSE_CV, Y, currTestIdx, FALSE)
tod_fav_test_val <-
predict_GLM(tod_fav_GLM, test_tod_fav_CV, Y, currTestIdx, FALSE)
tfr_fav_test_val <-
predict_GLM(tfr_fav_GLM, test_tfr_fav_CV, Y, currTestIdx, FALSE)
Y <- as.factor(patient_clinical_data$death)
tod_death_test_val <-
predict_GLM(tod_death_GLM, test_tod_death_CV, Y, currTestIdx, FALSE)
tfr_death_test_val <-
predict_GLM(tfr_death_GLM, test_tfr_death_CV, Y, currTestIdx, FALSE)
temp_test_val_list <-
list(
tod_GOSE_test_val,
tfr_GOSE_test_val,
tod_fav_test_val,
tfr_fav_test_val,
tod_death_test_val,
tfr_death_test_val
)
names(temp_test_val_list) <-
c(
"tod_GOSE_test_val",
"tfr_GOSE_test_val",
"tod_fav_test_val",
"tfr_fav_test_val",
"tod_death_test_val",
"tfr_death_test_val"
)
test_val_predictionsDis[[i]] <- temp_test_val_list
}
warnings()
source('./functions/predict_GLM.R')
View(self_val_predictionsDis)
View(test_val_predictionsDis)
