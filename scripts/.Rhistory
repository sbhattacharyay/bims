seq_for_12mo <- seq(length(idx_for_12mo))[idx_for_12mo]
patient_clinical_data_yr<-patient_clinical_data[seq_for_12mo,]
tod_tf_covariates_yr<-tod_tf_covariates[seq_for_12mo,]
tfr_tf_covariates_yr<-tfr_tf_covariates[seq_for_12mo,]
tod_motion_features_yr<-lapply(tod_motion_features, function(x) x[seq_for_12mo,])
tfr_motion_features_yr<-lapply(tfr_motion_features, function(x) x[seq_for_12mo,])
classification_function_shiny_dis <-function(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc){
set.seed(123)
# Split for k-fold cross validation for discharge predictions:
k <- 5
death_cvIdx <- createFolds(patient_clinical_data_yr$Death12Months,k,list = TRUE);
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates_yr
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates_yr
}
death_predictions <- vector(mode = "list", length = k)
clin_only_death_predictions  <- vector(mode = "list", length = k)
mf_only_death_predictions  <- vector(mode = "list", length = k)
for (i in 1:k) {
death_currTestIdx <- death_cvIdx[[i]]
death_currTrainIdx <- seq(nrow(patient_clinical_data_yr))[-death_currTestIdx]
# Convert numeric to logical indexing
death_logicalTest <- rep(FALSE, nrow(patient_clinical_data_yr))
death_logicalTest[death_currTestIdx] <- TRUE
death_logicalTrain <- !death_logicalTest
death_train_tf_covariates <- tf_covariates[death_currTrainIdx,]
death_test_tf_covariates  <- tf_covariates[death_currTestIdx,]
# Perform LOL on training data - Mortality Outcome LOL:
Y <- as.factor(patient_clinical_data_yr$Death12Months)
logicalIdx <- death_logicalTrain & !is.na(Y)
death_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# Prepare training covariates
train_death_CV<- cbind(death_train_tf_covariates$APACHE_risk,death_LOL$Xr[,1:r])
colnames(train_death_CV)<-c('APACHE_risk',paste0(rep("MF.",r),1:r))
clin_only_train_CV_death<-as.matrix(train_death_CV[,'APACHE_risk'])
mf_only_train_death_CV<-train_death_CV[,paste0(rep("MF.",r),1:r)]
# Prepare testing covariates
test_death_CV<- cbind(death_test_tf_covariates$APACHE_risk,curr_motion_features[death_currTestIdx,]%*%death_LOL$A[,1:r])
colnames(test_death_CV)<-c('APACHE_risk',paste0(rep("MF.",r),1:r))
clin_only_test_CV_death<-as.matrix(test_death_CV[,'APACHE_risk'])
mf_only_test_death_CV<-test_death_CV[,paste0(rep("MF.",r),1:r)]
# Train models on training data
Y <- as.factor(patient_clinical_data_yr$Death12Months)
death_models  <- train_caret_models(train_death_CV,Y,death_currTrainIdx,4,classifier_choice)
if ('glmnet' %in% classifier_choice){
temp_classifier_choice<-replace(classifier_choice, classifier_choice == 'glmnet', 'glm')
clin_only_death_models <- train_caret_models(clin_only_train_CV_death,Y,death_currTrainIdx,4,temp_classifier_choice)
} else {
clin_only_death_models <- train_caret_models(clin_only_train_CV_death,Y,death_currTrainIdx,4,classifier_choice)
}
mf_only_death_models <- train_caret_models(mf_only_train_death_CV,Y,death_currTrainIdx,4,classifier_choice)
# Predict outcomes on testing data using trained models
Y <- as.factor(patient_clinical_data_yr$Death12Months)
death_test_val<-predict_caret_models(death_models, test_death_CV, Y, death_currTestIdx)
clin_only_death_test_val<-predict_caret_models(clin_only_death_models, clin_only_test_CV_death, Y, death_currTestIdx)
mf_only_death_test_val<-predict_caret_models(mf_only_death_models, mf_only_test_death_CV, Y, death_currTestIdx)
death_predictions[[i]] <- death_test_val
clin_only_death_predictions[[i]] <- clin_only_death_test_val
mf_only_death_predictions[[i]] <- mf_only_death_test_val
}
outList <-
list(
death_predictions,
clin_only_death_predictions,
mf_only_death_predictions
)
names(outList) <-
c(
"death_predictions",
"clin_only_death_predictions",
"mf_only_death_predictions"
)
return(outList)
}
time_choice='tfr'
time_slide=c(0,8)
classifier_choice=c("APACHE", "Sex", "diag")
r=3
mf_choice='band_powerFeats'
sensor_loc=c("left_ank","left_el","left_wr","right_ank","right_el","right_wr")
yoopi<-classification_function_shiny_dis(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
classifier_choice=c("svmRadialWeights","knn","lda","glmnet")
yoopi<-classification_function_shiny_dis(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
View(yoopi)
yoopi[["death_predictions"]][[1]]
yoopi[["clin_only_death_predictions"]][[1]][["svmRadialWeights"]]
yoopi[["clin_only_death_predictions"]][[1]]
yoopi2<-classification_function_shiny_12mo(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
source('./functions/load_patient_clinical_data.R')
source('./functions/update_clinicalVariableList.R')
source('./functions/get_motion_features.R')
source("./functions/load_tf_patient_covariates.R")
source("./functions/train_caret_models.R")
source("./functions/predict_caret_models.R")
# Load patient clinical data (sorts by PY numbering and corrects variable types)
patient_clinical_data <- load_patient_clinical_data()
# Load and update clinical variable list
clinicalVariableList <- update_clinicalVariableList()
# Load Motion Features Organized by Time of Day (TOD)
if (!exists("tod_motion_features")) {
tod_sensors <-
readMat('../tod_motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
tod_motion_features <- get_motion_features(do.call(rbind, tod_sensors))
}
# Load Motion Features Organized by Time from Recording (TFR)
if (!exists("tfr_motion_features")) {
tfr_sensors <-
readMat('../tfr_motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
tfr_motion_features <- get_motion_features(do.call(rbind, tfr_sensors))
}
# Load transformed covariates for both TOD and TFR
tod_tf_covariates <-load_tf_patient_covariates('../tod_motion_feature_data/tf_patient_covariates.csv')
tfr_tf_covariates <-load_tf_patient_covariates('../tfr_motion_feature_data/tf_patient_covariates.csv')
tod_sensor_idx_ranges <- split(1:77754, ceiling(seq_along(1:77754)/12959))
tod_fp2_idx_ranges    <- lapply(tod_sensor_idx_ranges, function(x) x+77754)
tfr_sensor_idx_ranges <- split(1:34554, ceiling(seq_along(1:34554)/5759))
tfr_fp2_idx_ranges    <- lapply(tfr_sensor_idx_ranges, function(x) x+34554)
tfr_range<-seq(5/3600,8,length.out=5759)
tod_range<-seq(as.POSIXct("2020-05-05 18:00:05"),as.POSIXct("2020-05-06 12:00:00"),length.out=12959)
sensor_options <- c("left_ank","left_el","left_wr","right_ank","right_el","right_wr")
idx_for_12mo <- !is.na(patient_clinical_data$Death12Months)
seq_for_12mo <- seq(length(idx_for_12mo))[idx_for_12mo]
patient_clinical_data_yr<-patient_clinical_data[seq_for_12mo,]
tod_tf_covariates_yr<-tod_tf_covariates[seq_for_12mo,]
tfr_tf_covariates_yr<-tfr_tf_covariates[seq_for_12mo,]
tod_motion_features_yr<-lapply(tod_motion_features, function(x) x[seq_for_12mo,])
tfr_motion_features_yr<-lapply(tfr_motion_features, function(x) x[seq_for_12mo,])
classification_function_shiny_dis <-function(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc){
set.seed(123)
# Split for k-fold cross validation for discharge predictions:
k <- 5
death_cvIdx <- createFolds(patient_clinical_data_yr$Death12Months,k,list = TRUE);
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates_yr
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates_yr
}
death_predictions <- vector(mode = "list", length = k)
clin_only_death_predictions  <- vector(mode = "list", length = k)
mf_only_death_predictions  <- vector(mode = "list", length = k)
for (i in 1:k) {
death_currTestIdx <- death_cvIdx[[i]]
death_currTrainIdx <- seq(nrow(patient_clinical_data_yr))[-death_currTestIdx]
# Convert numeric to logical indexing
death_logicalTest <- rep(FALSE, nrow(patient_clinical_data_yr))
death_logicalTest[death_currTestIdx] <- TRUE
death_logicalTrain <- !death_logicalTest
death_train_tf_covariates <- tf_covariates[death_currTrainIdx,]
death_test_tf_covariates  <- tf_covariates[death_currTestIdx,]
# Perform LOL on training data - Mortality Outcome LOL:
Y <- as.factor(patient_clinical_data_yr$Death12Months)
logicalIdx <- death_logicalTrain & !is.na(Y)
death_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# Prepare training covariates
train_death_CV<- cbind(death_train_tf_covariates$APACHE_risk,death_LOL$Xr[,1:r])
colnames(train_death_CV)<-c('APACHE_risk',paste0(rep("MF.",r),1:r))
clin_only_train_CV_death<-as.matrix(train_death_CV[,'APACHE_risk'])
mf_only_train_death_CV<-train_death_CV[,paste0(rep("MF.",r),1:r)]
# Prepare testing covariates
test_death_CV<- cbind(death_test_tf_covariates$APACHE_risk,curr_motion_features[death_currTestIdx,]%*%death_LOL$A[,1:r])
colnames(test_death_CV)<-c('APACHE_risk',paste0(rep("MF.",r),1:r))
clin_only_test_CV_death<-as.matrix(test_death_CV[,'APACHE_risk'])
mf_only_test_death_CV<-test_death_CV[,paste0(rep("MF.",r),1:r)]
# Train models on training data
Y <- as.factor(patient_clinical_data_yr$Death12Months)
death_models  <- train_caret_models(train_death_CV,Y,death_currTrainIdx,4,classifier_choice)
if ('glmnet' %in% classifier_choice){
temp_classifier_choice<-replace(classifier_choice, classifier_choice == 'glmnet', 'glm')
clin_only_death_models <- train_caret_models(clin_only_train_CV_death,Y,death_currTrainIdx,4,temp_classifier_choice)
} else {
clin_only_death_models <- train_caret_models(clin_only_train_CV_death,Y,death_currTrainIdx,4,classifier_choice)
}
mf_only_death_models <- train_caret_models(mf_only_train_death_CV,Y,death_currTrainIdx,4,classifier_choice)
# Predict outcomes on testing data using trained models
Y <- as.factor(patient_clinical_data_yr$Death12Months)
death_test_val<-predict_caret_models(death_models, test_death_CV, Y, death_currTestIdx)
clin_only_death_test_val<-predict_caret_models(clin_only_death_models, clin_only_test_CV_death, Y, death_currTestIdx)
mf_only_death_test_val<-predict_caret_models(mf_only_death_models, mf_only_test_death_CV, Y, death_currTestIdx)
death_predictions[[i]] <- death_test_val
clin_only_death_predictions[[i]] <- clin_only_death_test_val
mf_only_death_predictions[[i]] <- mf_only_death_test_val
}
outList <-
list(
death_predictions,
clin_only_death_predictions,
mf_only_death_predictions
)
names(outList) <-
c(
"death_predictions",
"clin_only_death_predictions",
"mf_only_death_predictions"
)
return(outList)
}
yoopi2<-classification_function_shiny_12mo(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
source('./functions/load_patient_clinical_data.R')
source('./functions/update_clinicalVariableList.R')
source('./functions/get_motion_features.R')
source("./functions/load_tf_patient_covariates.R")
source("./functions/train_caret_models.R")
source("./functions/predict_caret_models.R")
# Load patient clinical data (sorts by PY numbering and corrects variable types)
patient_clinical_data <- load_patient_clinical_data()
# Load and update clinical variable list
clinicalVariableList <- update_clinicalVariableList()
# Load Motion Features Organized by Time of Day (TOD)
if (!exists("tod_motion_features")) {
tod_sensors <-
readMat('../tod_motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
tod_motion_features <- get_motion_features(do.call(rbind, tod_sensors))
}
# Load Motion Features Organized by Time from Recording (TFR)
if (!exists("tfr_motion_features")) {
tfr_sensors <-
readMat('../tfr_motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
tfr_motion_features <- get_motion_features(do.call(rbind, tfr_sensors))
}
# Load transformed covariates for both TOD and TFR
tod_tf_covariates <-load_tf_patient_covariates('../tod_motion_feature_data/tf_patient_covariates.csv')
tfr_tf_covariates <-load_tf_patient_covariates('../tfr_motion_feature_data/tf_patient_covariates.csv')
tod_sensor_idx_ranges <- split(1:77754, ceiling(seq_along(1:77754)/12959))
tod_fp2_idx_ranges    <- lapply(tod_sensor_idx_ranges, function(x) x+77754)
tfr_sensor_idx_ranges <- split(1:34554, ceiling(seq_along(1:34554)/5759))
tfr_fp2_idx_ranges    <- lapply(tfr_sensor_idx_ranges, function(x) x+34554)
tfr_range<-seq(5/3600,8,length.out=5759)
tod_range<-seq(as.POSIXct("2020-05-05 18:00:05"),as.POSIXct("2020-05-06 12:00:00"),length.out=12959)
sensor_options <- c("left_ank","left_el","left_wr","right_ank","right_el","right_wr")
idx_for_12mo <- !is.na(patient_clinical_data$Death12Months)
seq_for_12mo <- seq(length(idx_for_12mo))[idx_for_12mo]
patient_clinical_data_yr<-patient_clinical_data[seq_for_12mo,]
tod_tf_covariates_yr<-tod_tf_covariates[seq_for_12mo,]
tfr_tf_covariates_yr<-tfr_tf_covariates[seq_for_12mo,]
tod_motion_features_yr<-lapply(tod_motion_features, function(x) x[seq_for_12mo,])
tfr_motion_features_yr<-lapply(tfr_motion_features, function(x) x[seq_for_12mo,])
classification_function_shiny_12mo <-function(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc){
set.seed(123)
# Split for k-fold cross validation for discharge predictions:
k <- 5
death_cvIdx <- createFolds(patient_clinical_data_yr$Death12Months,k,list = TRUE);
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates_yr
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates_yr
}
death_predictions <- vector(mode = "list", length = k)
clin_only_death_predictions  <- vector(mode = "list", length = k)
mf_only_death_predictions  <- vector(mode = "list", length = k)
for (i in 1:k) {
death_currTestIdx <- death_cvIdx[[i]]
death_currTrainIdx <- seq(nrow(patient_clinical_data_yr))[-death_currTestIdx]
# Convert numeric to logical indexing
death_logicalTest <- rep(FALSE, nrow(patient_clinical_data_yr))
death_logicalTest[death_currTestIdx] <- TRUE
death_logicalTrain <- !death_logicalTest
death_train_tf_covariates <- tf_covariates[death_currTrainIdx,]
death_test_tf_covariates  <- tf_covariates[death_currTestIdx,]
# Perform LOL on training data - Mortality Outcome LOL:
Y <- as.factor(patient_clinical_data_yr$Death12Months)
logicalIdx <- death_logicalTrain & !is.na(Y)
death_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# Prepare training covariates
train_death_CV<- cbind(death_train_tf_covariates$APACHE_risk,death_LOL$Xr[,1:r])
colnames(train_death_CV)<-c('APACHE_risk',paste0(rep("MF.",r),1:r))
clin_only_train_CV_death<-as.matrix(train_death_CV[,'APACHE_risk'])
mf_only_train_death_CV<-train_death_CV[,paste0(rep("MF.",r),1:r)]
# Prepare testing covariates
test_death_CV<- cbind(death_test_tf_covariates$APACHE_risk,curr_motion_features[death_currTestIdx,]%*%death_LOL$A[,1:r])
colnames(test_death_CV)<-c('APACHE_risk',paste0(rep("MF.",r),1:r))
clin_only_test_CV_death<-as.matrix(test_death_CV[,'APACHE_risk'])
mf_only_test_death_CV<-test_death_CV[,paste0(rep("MF.",r),1:r)]
# Train models on training data
Y <- as.factor(patient_clinical_data_yr$Death12Months)
death_models  <- train_caret_models(train_death_CV,Y,death_currTrainIdx,4,classifier_choice)
if ('glmnet' %in% classifier_choice){
temp_classifier_choice<-replace(classifier_choice, classifier_choice == 'glmnet', 'glm')
clin_only_death_models <- train_caret_models(clin_only_train_CV_death,Y,death_currTrainIdx,4,temp_classifier_choice)
} else {
clin_only_death_models <- train_caret_models(clin_only_train_CV_death,Y,death_currTrainIdx,4,classifier_choice)
}
mf_only_death_models <- train_caret_models(mf_only_train_death_CV,Y,death_currTrainIdx,4,classifier_choice)
# Predict outcomes on testing data using trained models
Y <- as.factor(patient_clinical_data_yr$Death12Months)
death_test_val<-predict_caret_models(death_models, test_death_CV, Y, death_currTestIdx)
clin_only_death_test_val<-predict_caret_models(clin_only_death_models, clin_only_test_CV_death, Y, death_currTestIdx)
mf_only_death_test_val<-predict_caret_models(mf_only_death_models, mf_only_test_death_CV, Y, death_currTestIdx)
death_predictions[[i]] <- death_test_val
clin_only_death_predictions[[i]] <- clin_only_death_test_val
mf_only_death_predictions[[i]] <- mf_only_death_test_val
}
outList <-
list(
death_predictions,
clin_only_death_predictions,
mf_only_death_predictions
)
names(outList) <-
c(
"death_predictions",
"clin_only_death_predictions",
"mf_only_death_predictions"
)
return(outList)
}
yoopi2<-classification_function_shiny_12mo(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
library(lolR)
library(R.matlab)
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(forcats)
library(readxl)
library(plotly)
library(naniar)
library(MASS)
library(glmnet)
library(caret)
library(kernlab)
library(rlist)
library(nnet)
library(e1071)
library(randomForest)
library(foreach)
library(gridExtra)
library(ggplotify)
library(precrec)
library(cvAUC)
library(grid)
library(cowplot)
library(shinycssloaders)
source('./functions/load_patient_clinical_data.R')
source('./functions/update_clinicalVariableList.R')
source('./functions/get_motion_features.R')
source('./functions/lol_project_motion_features.R')
source("./functions/strat_cross_val_splits.R")
source("./functions/load_tf_patient_covariates.R")
source('./functions/cv_lol_project_motion_features.R')
source('./functions/prepare_training_covariates.R')
source('./functions/prepare_testing_covariates.R')
source('./functions/classification_function_shiny_dis.R')
source('./functions/classification_function_shiny_12mo.R')
source('./functions/train_caret_models.R')
source('./functions/predict_caret_models.R')
source('./functions/get_auc_info.R')
source('./functions/get_auc_plots.R')
source('./functions/get_precrec_info.R')
source('./functions/get_precrec_plots.R')
get_auc <- get_auc_info(yoopi2)
get_plots <- get_auc_plots(get_auc)
do.call(plot_grid, c(unlist(get_plots, recursive = F), ncol=3))
View(tfr_sensor_idx_ranges)
View(get_auc)
get_plots <- get_auc_plots(get_auc)
#### Master Script 9: Classification of Mortality Outcomes ####
# Decoding Quantitative Motor Features for Classification and Prediction
# in Severe Acquired Brain Injury
#
# Shubhayu Bhattacharyay, Matthew Wang, Eshan Joshi
# Department of Biomedical Engineering
# Department of Applied Mathematics and Statistics
# Whiting School of Engineering, Johns Hopkins University
# email address: shubhayu@jhu.edu
library(devtools)
if (!require(lolR))
install_github('neurodata/lol',
build_vignettes = TRUE,
force = TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(glmnet)
library(caret)
library(kernlab)
library(rlist)
library(cvAUC)
source('./functions/load_patient_clinical_data.R')
source('./functions/update_clinicalVariableList.R')
source('./functions/get_motion_features.R')
source('./functions/lol_project_motion_features.R')
source("./functions/load_tf_patient_covariates.R")
source('./functions/cv_lol_project_motion_features.R')
source('./functions/prepare_training_covariates.R')
source('./functions/prepare_testing_covariates.R')
source('./functions/train_caret_models.R')
source('./functions/predict_caret_models.R')
source('./functions/classification_function_shiny_dis.R')
source('./functions/classification_function_shiny_12mo.R')
source('./functions/get_auc_info.R')
time_choice<-'tfr'
time_slide<-c(0,8)
classifier_choice<-c("svmRadialWeights","knn","lda","glmnet")
r<-6
mf_choice<-c("band_powerFeats","freq_entropyFeats","freq_pairsFeats","med_freqFeats","smaFeats","waveletsFeats")
sensor_loc<-c("left_ank","left_el","left_wr","right_ank","right_el","right_wr")
preds_dis<-classification_function_shiny_dis(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
preds_12m<-classification_function_shiny_12mo(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
auc_dis <- get_auc_info(preds_dis)
auc_12m <- get_auc_info(preds_12m)
get_auc_plots <- function(auc_info){
val<-names(auc_info[[1]])
col_vector=c('red','green','blue')
name_vector=c('CM: ','CF only: ', 'MF only: ')
plot_sep<-list(c(1,4,6),c(2,4,7),c(3,5,8))
plots <- vector(mode = "list", length = length(val))
i = 1
for (z in plot_sep){
auc_stats<<-sapply(seq_along(z), function(x) {
sapply(seq_along(auc_info[z][[1]]), function(y) {
paste(name_vector[x],round(mean(auc_info[z][[x]][[y]]$fold.AUC),2), "(+/-",round(sd(auc_info[z][[x]][[y]]$fold.AUC),2),")")
})
})
lapply(seq_along(auc_info[z][[1]]), function(y){
plots[[y]][[i]]<<-arrangeGrob((as.ggplot(function()
sapply(seq_along(auc_info[z]), function(x) {
plot(auc_info[z][[x]][[y]]$perf,col='grey',lty=3)
plot(auc_info[z][[x]][[y]]$perf,avg="vertical",col=col_vector[x], lwd=2, add=TRUE)
par(new=T)
})
)+coord_fixed()),top=textGrob(val[y],vjust = 1.5, gp = gpar(fontface = "bold", cex = 1.5)),
bottom=textGrob(paste('Mean AUC (+/-1 SD)',paste(auc_stats[y,], collapse='\n'), sep='\n')))
par(new=F)
})
i=i+1
}
return(plots)
}
get_auc_plots(auc_dis)
library(gridExtra)
get_auc_plots(auc_dis)
library(ggplot2)
get_auc_plots(auc_dis)
library(ggplotify)
get_auc_plots(auc_dis)
auc_info<-auc_dis
val<-names(auc_info[[1]])
val
col_vector=c('red','green','blue')
name_vector=c('CM: ','CF only: ', 'MF only: ')
plots <- vector(mode = "list", length = length(val))
plots
plot_sep<-list(c(1,4,6),c(2,4,7),c(3,5,8))
plot_sep
z=plot_sep[[1]]
auc_stats<<-sapply(seq_along(z), function(x) {
sapply(seq_along(auc_info[z][[1]]), function(y) {
paste(name_vector[x],round(mean(auc_info[z][[x]][[y]]$fold.AUC),2), "(+/-",round(sd(auc_info[z][[x]][[y]]$fold.AUC),2),")")
})
}
)
View(auc_dis)
View(auc_12m)
View(auc_info)
View(auc_12m)
View(auc_dis)
View(auc_info)
View(auc_12m)
