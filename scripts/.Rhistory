# Prepare testing covariates
test_death_CV<- cbind(death_test_tf_covariates$APACHE_risk,curr_motion_features[death_currTestIdx,]%*%death_LOL$A[,1:r])
colnames(test_death_CV)<-c('APACHE_risk',paste0(rep("MF.",r),1:r))
clin_only_test_CV_death<-as.matrix(test_death_CV[,'APACHE_risk'])
mf_only_test_death_CV<-test_death_CV[,paste0(rep("MF.",r),1:r)]
# Train models on training data
Y <- as.factor(patient_clinical_data_yr$Death12Months)
death_models  <- train_caret_models(train_death_CV,Y,death_currTrainIdx,4,classifier_choice)
if ('glmnet' %in% classifier_choice){
temp_classifier_choice<-replace(classifier_choice, classifier_choice == 'glmnet', 'glm')
clin_only_death_models <- train_caret_models(clin_only_train_CV_death,Y,death_currTrainIdx,4,temp_classifier_choice)
} else {
clin_only_death_models <- train_caret_models(clin_only_train_CV_death,Y,death_currTrainIdx,4,classifier_choice)
}
mf_only_death_models <- train_caret_models(mf_only_train_death_CV,Y,death_currTrainIdx,4,classifier_choice)
# Predict outcomes on testing data using trained models
Y <- as.factor(patient_clinical_data_yr$Death12Months)
death_test_val<-predict_caret_models(death_models, test_death_CV, Y, death_currTestIdx)
clin_only_death_test_val<-predict_caret_models(clin_only_death_models, clin_only_test_CV_death, Y, death_currTestIdx)
mf_only_death_test_val<-predict_caret_models(mf_only_death_models, mf_only_test_death_CV, Y, death_currTestIdx)
death_predictions[[i]] <- death_test_val
clin_only_death_predictions[[i]] <- clin_only_death_test_val
mf_only_death_predictions[[i]] <- mf_only_death_test_val
}
outList <-
list(
death_predictions,
clin_only_death_predictions,
mf_only_death_predictions
)
names(outList) <-
c(
"death_predictions",
"clin_only_death_predictions",
"mf_only_death_predictions"
)
return(outList)
}
yoopi2<-classification_function_shiny_12mo(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
library(lolR)
library(R.matlab)
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(forcats)
library(readxl)
library(plotly)
library(naniar)
library(MASS)
library(glmnet)
library(caret)
library(kernlab)
library(rlist)
library(nnet)
library(e1071)
library(randomForest)
library(foreach)
library(gridExtra)
library(ggplotify)
library(precrec)
library(cvAUC)
library(grid)
library(cowplot)
library(shinycssloaders)
source('./functions/load_patient_clinical_data.R')
source('./functions/update_clinicalVariableList.R')
source('./functions/get_motion_features.R')
source('./functions/lol_project_motion_features.R')
source("./functions/strat_cross_val_splits.R")
source("./functions/load_tf_patient_covariates.R")
source('./functions/cv_lol_project_motion_features.R')
source('./functions/prepare_training_covariates.R')
source('./functions/prepare_testing_covariates.R')
source('./functions/classification_function_shiny_dis.R')
source('./functions/classification_function_shiny_12mo.R')
source('./functions/train_caret_models.R')
source('./functions/predict_caret_models.R')
source('./functions/get_auc_info.R')
source('./functions/get_auc_plots.R')
source('./functions/get_precrec_info.R')
source('./functions/get_precrec_plots.R')
get_auc <- get_auc_info(yoopi2)
get_plots <- get_auc_plots(get_auc)
do.call(plot_grid, c(unlist(get_plots, recursive = F), ncol=3))
View(tfr_sensor_idx_ranges)
View(get_auc)
get_plots <- get_auc_plots(get_auc)
#### Master Script 9: Classification of Mortality Outcomes ####
# Decoding Quantitative Motor Features for Classification and Prediction
# in Severe Acquired Brain Injury
#
# Shubhayu Bhattacharyay, Matthew Wang, Eshan Joshi
# Department of Biomedical Engineering
# Department of Applied Mathematics and Statistics
# Whiting School of Engineering, Johns Hopkins University
# email address: shubhayu@jhu.edu
library(devtools)
if (!require(lolR))
install_github('neurodata/lol',
build_vignettes = TRUE,
force = TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(glmnet)
library(caret)
library(kernlab)
library(rlist)
library(cvAUC)
source('./functions/load_patient_clinical_data.R')
source('./functions/update_clinicalVariableList.R')
source('./functions/get_motion_features.R')
source('./functions/lol_project_motion_features.R')
source("./functions/load_tf_patient_covariates.R")
source('./functions/cv_lol_project_motion_features.R')
source('./functions/prepare_training_covariates.R')
source('./functions/prepare_testing_covariates.R')
source('./functions/train_caret_models.R')
source('./functions/predict_caret_models.R')
source('./functions/classification_function_shiny_dis.R')
source('./functions/classification_function_shiny_12mo.R')
source('./functions/get_auc_info.R')
time_choice<-'tfr'
time_slide<-c(0,8)
classifier_choice<-c("svmRadialWeights","knn","lda","glmnet")
r<-6
mf_choice<-c("band_powerFeats","freq_entropyFeats","freq_pairsFeats","med_freqFeats","smaFeats","waveletsFeats")
sensor_loc<-c("left_ank","left_el","left_wr","right_ank","right_el","right_wr")
preds_dis<-classification_function_shiny_dis(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
preds_12m<-classification_function_shiny_12mo(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
auc_dis <- get_auc_info(preds_dis)
auc_12m <- get_auc_info(preds_12m)
get_auc_plots <- function(auc_info){
val<-names(auc_info[[1]])
col_vector=c('red','green','blue')
name_vector=c('CM: ','CF only: ', 'MF only: ')
plot_sep<-list(c(1,4,6),c(2,4,7),c(3,5,8))
plots <- vector(mode = "list", length = length(val))
i = 1
for (z in plot_sep){
auc_stats<<-sapply(seq_along(z), function(x) {
sapply(seq_along(auc_info[z][[1]]), function(y) {
paste(name_vector[x],round(mean(auc_info[z][[x]][[y]]$fold.AUC),2), "(+/-",round(sd(auc_info[z][[x]][[y]]$fold.AUC),2),")")
})
})
lapply(seq_along(auc_info[z][[1]]), function(y){
plots[[y]][[i]]<<-arrangeGrob((as.ggplot(function()
sapply(seq_along(auc_info[z]), function(x) {
plot(auc_info[z][[x]][[y]]$perf,col='grey',lty=3)
plot(auc_info[z][[x]][[y]]$perf,avg="vertical",col=col_vector[x], lwd=2, add=TRUE)
par(new=T)
})
)+coord_fixed()),top=textGrob(val[y],vjust = 1.5, gp = gpar(fontface = "bold", cex = 1.5)),
bottom=textGrob(paste('Mean AUC (+/-1 SD)',paste(auc_stats[y,], collapse='\n'), sep='\n')))
par(new=F)
})
i=i+1
}
return(plots)
}
get_auc_plots(auc_dis)
library(gridExtra)
get_auc_plots(auc_dis)
library(ggplot2)
get_auc_plots(auc_dis)
library(ggplotify)
get_auc_plots(auc_dis)
auc_info<-auc_dis
val<-names(auc_info[[1]])
val
col_vector=c('red','green','blue')
name_vector=c('CM: ','CF only: ', 'MF only: ')
plots <- vector(mode = "list", length = length(val))
plots
plot_sep<-list(c(1,4,6),c(2,4,7),c(3,5,8))
plot_sep
z=plot_sep[[1]]
auc_stats<<-sapply(seq_along(z), function(x) {
sapply(seq_along(auc_info[z][[1]]), function(y) {
paste(name_vector[x],round(mean(auc_info[z][[x]][[y]]$fold.AUC),2), "(+/-",round(sd(auc_info[z][[x]][[y]]$fold.AUC),2),")")
})
}
)
View(auc_dis)
View(auc_12m)
View(auc_info)
View(auc_12m)
View(auc_dis)
View(auc_info)
View(auc_12m)
#### Master Script 9: Classification of Mortality Outcomes ####
# Decoding Quantitative Motor Features for Classification and Prediction
# in Severe Acquired Brain Injury
#
# Shubhayu Bhattacharyay, Matthew Wang, Eshan Joshi
# Department of Biomedical Engineering
# Department of Applied Mathematics and Statistics
# Whiting School of Engineering, Johns Hopkins University
# email address: shubhayu@jhu.edu
library(devtools)
if (!require(lolR))
install_github('neurodata/lol',
build_vignettes = TRUE,
force = TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(glmnet)
library(caret)
library(kernlab)
library(rlist)
library(cvAUC)
library(gridExtra)
library(ggplotify)
source('./functions/load_patient_clinical_data.R')
source('./functions/update_clinicalVariableList.R')
source('./functions/get_motion_features.R')
source('./functions/lol_project_motion_features.R')
source("./functions/load_tf_patient_covariates.R")
source('./functions/cv_lol_project_motion_features.R')
source('./functions/prepare_training_covariates.R')
source('./functions/prepare_testing_covariates.R')
source('./functions/train_caret_models.R')
source('./functions/predict_caret_models.R')
source('./functions/classification_function_shiny_dis.R')
source('./functions/classification_function_shiny_12mo.R')
source('./functions/get_auc_info.R')
time_choice<-'tfr'
time_slide<-c(0,8)
classifier_choice<-c("svmRadialWeights","knn","lda","glmnet")
r<-6
mf_choice<-c("band_powerFeats","freq_entropyFeats","freq_pairsFeats","med_freqFeats","smaFeats","waveletsFeats")
sensor_loc<-c("left_ank","left_el","left_wr","right_ank","right_el","right_wr")
preds_dis<-classification_function_shiny_dis(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
preds_12m<-classification_function_shiny_12mo(time_choice,time_slide,classifier_choice,r,mf_choice,sensor_loc)
auc_dis <- get_auc_info(preds_dis)
auc_12m <- get_auc_info(preds_12m)
View(auc_12m)
View(auc_dis)
View(auc_dis)
set.seed(123)
# Split for k-fold cross validation for discharge predictions:
k <- 5
death_cvIdx <- createFolds(patient_clinical_data$DiedDuringThisHospitalStay_,k,list = TRUE);
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates
}
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
xval.fit <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=c(5, 10, 15), lol.project.lol,
classifier.return=NaN, k='loo')
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
xval.fit <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=c(5, 10, 15), lol.project.lol,
classifier.return=NaN, k=is.integer(5))
warnings
warnings()
results <- xval.fit
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
result <- xval.fit
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(X, Y, rs=c(5, 10, 15), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
siz
size(curr_motion_features)
dim(curr_motion_features)
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=c(5, 10, 15), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
data <- data.frame(x1=result$model$Xr[,1], x2=result$model$Xr[,2], y=Y)
data$y <- factor(data$y)
ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("x1") +
ylab("x2") +
ggtitle(sprintf("Projected Data using LOL, L=%.2f", result$optimal.lhat))
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
seq(1,10)
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=seq(1,10), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
print(sprintf("optimal dimension: %d", result$optimal.r))
ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("x1") +
ylab("x2") +
ggtitle(sprintf("Projected Data using LOL, L=%.2f", result$optimal.lhat))
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
print(sprintf("Misclassification rate at rhat = %d: %.2f", result$optimal.r, result$optimal.lhat))
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=seq(1,30), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("x1") +
ylab("x2") +
ggtitle(sprintf("Projected Data using LOL, L=%.2f", result$optimal.lhat))
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
print(sprintf("Misclassification rate at rhat = %d: %.2f", result$optimal.r, result$optimal.lhat))
c(2:10 %o% 10^(3:7))
install.packages('emdbook')
library(emdbook)
lseq(1,1000)
lseq(1,1000,4)
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=lseq(1,1000,4), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("x1") +
ylab("x2") +
ggtitle(sprintf("Projected Data using LOL, L=%.2f", result$optimal.lhat))
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=seq(1,68), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("x1") +
ylab("x2") +
ggtitle(sprintf("Projected Data using LOL, L=%.2f", result$optimal.lhat))
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=seq(1,49), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
69/5
*4
14*4
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=seq(1,30), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
data <- data.frame(x1=result$model$Xr[,1], x2=result$model$Xr[,2], y=Y)
data$y <- factor(data$y)
ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("x1") +
ylab("x2") +
ggtitle(sprintf("Projected Data using LOL, L=%.2f", result$optimal.lhat))
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
print(sprintf("optimal dimension: %d", result$optimal.r))
print(sprintf("Misclassification rate at rhat = %d: %.2f", result$optimal.r, result$optimal.lhat))
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=seq(1,35), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=is.integer(5))
scale.data
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=seq(1,35), alg = lol.project.lol, alg.return="A",
classifier=glm, classifier.return="class", k=is.integer(5))
Y <- patient_clinical_data$DiedDuringThisHospitalStay_
result <- lol.xval.optimal_dimselect(curr_motion_features, Y, rs=seq(1,20), alg = lol.project.lol, alg.return="A",
classifier=glm, classifier.return="class", k=is.integer(5))
plot(patient_clinical_data$NCCUAdmissionAge_y_,patient_clinical_data$DiedDuringThisHospitalStay_)
plot(patient_clinical_data$GCST,patient_clinical_data$DiedDuringThisHospitalStay_)
plot(patient_clinical_data$APACHEII,patient_clinical_data$DiedDuringThisHospitalStay_)
plot(patient_clinical_data$APACHEIIMortalityRisk,patient_clinical_data$DiedDuringThisHospitalStay_)
plot(patient_clinical_data$APACHEIIMortalityRisk,patient_clinical_data$Death12Months)
plot(preds_dis$death_predictions)
(preds_dis$death_predictions)
(preds_dis$death_predictions)[,1]
(preds_dis$death_predictions)[1]
(preds_dis$death_predictions)[[1]]
(preds_dis$death_predictions)[[1]]
heyo<-(preds_dis$death_predictions)[[1]]
y<-heyo$ground_truth
x <- heyo$glmnet
plot(x,y)
x <- heyo$lda
plot(x,y)
auc_dis <- get_auc_info(preds_dis)
auc_dis_ci <- get_auc_info_ci(preds_dis)
auc_12m <- get_auc_info(preds_12m)
auc_12m_ci <- get_auc_info_ci(preds_12m)
auc_dis_plots<-get_auc_plots(auc_dis,auc_dis_ci)
auc_12m_plots<-get_auc_plots(auc_12m,auc_dis_ci)
setwd(generateRootDir())
save_plot(do.call(plot_grid, c(unlist(auc_dis_plots, recursive = F), ncol=2,align='hv')), file="auc_dis.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
save_plot(do.call(plot_grid, c(unlist(auc_12m_plots, recursive = F), ncol=2,align='hv')), file="auc_12m.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
setwd('../../scripts')
source('./functions/generateRootDir.R')
source('./functions/get_auc_info.R')
source('./functions/get_auc_plots.R')
source('./functions/get_auc_info_ci.R')
source('./functions/generateRootDir.R')
auc_dis <- get_auc_info(preds_dis)
auc_dis_ci <- get_auc_info_ci(preds_dis)
auc_12m <- get_auc_info(preds_12m)
auc_12m_ci <- get_auc_info_ci(preds_12m)
auc_dis_plots<-get_auc_plots(auc_dis,auc_dis_ci)
auc_12m_plots<-get_auc_plots(auc_12m,auc_dis_ci)
setwd(generateRootDir())
save_plot(do.call(plot_grid, c(unlist(auc_dis_plots, recursive = F), ncol=2,align='hv')), file="auc_dis.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
save_plot(do.call(plot_grid, c(unlist(auc_12m_plots, recursive = F), ncol=2,align='hv')), file="auc_12m.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
setwd('../../scripts')
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(glmnet)
library(caret)
library(kernlab)
library(rlist)
library(cvAUC)
library(gridExtra)
library(ggplotify)
library(grid)
library(cowplot)
auc_dis <- get_auc_info(preds_dis)
auc_dis_ci <- get_auc_info_ci(preds_dis)
auc_12m <- get_auc_info(preds_12m)
auc_12m_ci <- get_auc_info_ci(preds_12m)
auc_dis_plots<-get_auc_plots(auc_dis,auc_dis_ci)
auc_12m_plots<-get_auc_plots(auc_12m,auc_dis_ci)
setwd(generateRootDir())
save_plot(do.call(plot_grid, c(unlist(auc_dis_plots, recursive = F), ncol=2,align='hv')), file="auc_dis.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
save_plot(do.call(plot_grid, c(unlist(auc_12m_plots, recursive = F), ncol=2,align='hv')), file="auc_12m.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
setwd('../../scripts')
auc_dis <- get_auc_info(preds_dis)
auc_dis_ci <- get_auc_info_ci(preds_dis)
auc_12m <- get_auc_info(preds_12m)
auc_12m_ci <- get_auc_info_ci(preds_12m)
auc_dis_plots<-get_auc_plots(auc_dis,auc_dis_ci)
auc_12m_plots<-get_auc_plots(auc_12m,auc_12m_ci)
setwd(generateRootDir())
save_plot(do.call(plot_grid, c(unlist(auc_dis_plots, recursive = F), ncol=2,align='hv')), file="auc_dis.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
save_plot(do.call(plot_grid, c(unlist(auc_12m_plots, recursive = F), ncol=2,align='hv')), file="auc_12m.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
cd ../../
setwd('../../scripts/')
auc_dis <- get_auc_info(preds_dis)
auc_dis_ci <- get_auc_info_ci(preds_dis)
auc_12m <- get_auc_info(preds_12m)
auc_12m_ci <- get_auc_info_ci(preds_12m)
auc_dis_plots<-get_auc_plots(auc_dis,auc_dis_ci)
auc_12m_plots<-get_auc_plots(auc_12m,auc_12m_ci)
setwd(generateRootDir())
save_plot(do.call(plot_grid, c(unlist(auc_dis_plots, recursive = F), ncol=2,align='hv')), file="auc_dis.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
save_plot(do.call(plot_grid, c(unlist(auc_12m_plots, recursive = F), ncol=2,align='hv')), file="auc_12m.pdf",
ncol=2,base_asp = 1.1,base_height=12, base_width=5)
setwd('../../scripts')
