knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/eshanjoshi/Documents/Spring_2020/BMDS/Homeworks/hw7')
library(magrittr)
library(dplyr)
library(glmnet)
library(Metrics)
library(knitr)
shhs1_data <- read.delim("shhs1.txt") %>% rename(bmi=bmi_s1, age=age_s1)
lin_model <- lm(log(rdi4p+1)~waist+age+gender+bmi, data=shhs1_data)
summary(lin_model)
shhs1_data$sdb <- as.integer(shhs1_data$rdi4p>15)
sdb_model <- glm(sdb ~ waist+age+gender+bmi,family="binomial",data=shhs1_data)
summary(sdb_model)
htnDerv_model <- glm(HTNDerv_s1 ~ age+gender+bmi+rdi4p,family="binomial",data=shhs1_data)
summary(htnDerv_model)
shhs1_data.clean <- shhs1_data %>% na.omit()
fit.data <- shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi)  %>% data.matrix()
fit.lasso <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=1)
plot(fit.lasso,label=TRUE, xvar = "lambda")
fit.ridge <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0)
plot(fit.ridge,label=TRUE, xvar = "lambda")
fit.elnet <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0.5)
plot(fit.elnet,label=TRUE, xvar = "lambda")
train = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% sample_frac(0.75)
test = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% setdiff(train)
x.train <- train%>%select(waist,age,gender,bmi)%>%data.matrix()
x.test <- test%>%select(waist,age,gender,bmi)%>%data.matrix()
y.train <- log(train$rdi4p+1)
y.test <- log(test$rdi4p+1)
model.np<-lm(log(rdi4p+1)~waist+age+gender+bmi,data=train)
model.np.predict<-predict(model.np,test)
model.np.MSE<-mse(y.test,model.np.predict)
model.elnet <- cv.glmnet(x.train,y.train,alpha = 0.5,type.measure ="mse")
model.elnet.predict<-predict(model.elnet,x.test)
model.elnet.MSE<-mse(y.test,model.elnet.predict)
plot(model.elnet,main="Elastic Net Model Cross-Validation Fit")
model.lasso <- cv.glmnet(x.train,y.train,alpha = 1,type.measure ="mse")
model.lasso.predict<-predict(model.lasso,x.test)
model.lasso.MSE<-mse(y.test,model.lasso.predict)
plot(model.lasso,main="Lasso Model Cross-Validation Fit")
model.ridge <- cv.glmnet(x.train,y.train,alpha = 0,type.measure ="mse")
model.ridge.predict<-predict(model.ridge,x.test)
model.ridge.MSE<-mse(y.test,model.ridge.predict)
plot(model.ridge,main="Ridge Model Cross-Validation Fit")
MSE <- c(model.np.MSE,model.elnet.MSE,model.lasso.MSE,model.ridge.MSE)
Penalty <- c("None","Lasso","Elastic Net","Ridge")
kable(data.frame(Penalty,MSE))
knitr::opts_chunk$set(echo = TRUE)
knitr::kable(data.frame(Penalty,MSE))
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/eshanjoshi/Documents/Spring_2020/BMDS/Homeworks/hw7')
library(magrittr)
library(dplyr)
library(glmnet)
library(Metrics)
train = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% sample_frac(0.75)
test = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% setdiff(train)
x.train <- train%>%select(waist,age,gender,bmi)%>%data.matrix()
x.test <- test%>%select(waist,age,gender,bmi)%>%data.matrix()
y.train <- log(train$rdi4p+1)
y.test <- log(test$rdi4p+1)
model.np<-lm(log(rdi4p+1)~waist+age+gender+bmi,data=train)
model.np.predict<-predict(model.np,test)
model.np.MSE<-mse(y.test,model.np.predict)
model.elnet <- cv.glmnet(x.train,y.train,alpha = 0.5,type.measure ="mse")
model.elnet.predict<-predict(model.elnet,x.test)
model.elnet.MSE<-mse(y.test,model.elnet.predict)
plot(model.elnet,main="Elastic Net Model Cross-Validation Fit")
model.lasso <- cv.glmnet(x.train,y.train,alpha = 1,type.measure ="mse")
model.lasso.predict<-predict(model.lasso,x.test)
model.lasso.MSE<-mse(y.test,model.lasso.predict)
plot(model.lasso,main="Lasso Model Cross-Validation Fit")
model.ridge <- cv.glmnet(x.train,y.train,alpha = 0,type.measure ="mse")
model.ridge.predict<-predict(model.ridge,x.test)
model.ridge.MSE<-mse(y.test,model.ridge.predict)
plot(model.ridge,main="Ridge Model Cross-Validation Fit")
MSE <- c(model.np.MSE,model.elnet.MSE,model.lasso.MSE,model.ridge.MSE)
Penalty <- c("None","Lasso","Elastic Net","Ridge")
knitr::kable_styling(data.frame(Penalty,MSE))
library(installr)
install.packages("gridExtra")
exp(0.1)
exp(0.1066)
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/eshanjoshi/Documents/Spring_2020/BMDS/Homeworks/hw7')
library(magrittr)
library(dplyr)
library(glmnet)
library(Metrics)
library(gridExtra)
shhs1_data <- read.delim("shhs1.txt") %>% rename(bmi=bmi_s1, age=age_s1)
lin_model <- lm(log(rdi4p+1)~waist+age+gender+bmi, data=shhs1_data)
summary(lin_model)
shhs1_data$sdb <- as.integer(shhs1_data$rdi4p>15)
sdb_model <- glm(sdb ~ waist+age+gender+bmi,family="binomial",data=shhs1_data)
summary(sdb_model)
exp(sdb_model$coeff)
htnDerv_model <- glm(HTNDerv_s1 ~ age+gender+bmi+rdi4p,family="binomial",data=shhs1_data)
summary(htnDerv_model)
shhs1_data.clean <- shhs1_data %>% na.omit()
fit.data <- shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi)  %>% data.matrix()
fit.lasso <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=1)
plot(fit.lasso,label=TRUE, xvar = "lambda")
fit.ridge <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0)
plot(fit.ridge,label=TRUE, xvar = "lambda")
fit.elnet <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0.5)
plot(fit.elnet,label=TRUE, xvar = "lambda")
train = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% sample_frac(0.75)
test = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% setdiff(train)
x.train <- train%>%select(waist,age,gender,bmi)%>%data.matrix()
x.test <- test%>%select(waist,age,gender,bmi)%>%data.matrix()
y.train <- log(train$rdi4p+1)
y.test <- log(test$rdi4p+1)
model.np<-lm(log(rdi4p+1)~waist+age+gender+bmi,data=train)
model.np.predict<-predict(model.np,test)
model.np.MSE<-mse(y.test,model.np.predict)
model.elnet <- cv.glmnet(x.train,y.train,alpha = 0.5,type.measure ="mse")
model.elnet.predict<-predict(model.elnet,x.test)
model.elnet.MSE<-mse(y.test,model.elnet.predict)
plot(model.elnet,main="Elastic Net Model Cross-Validation Fit")
model.lasso <- cv.glmnet(x.train,y.train,alpha = 1,type.measure ="mse")
model.lasso.predict<-predict(model.lasso,x.test)
model.lasso.MSE<-mse(y.test,model.lasso.predict)
plot(model.lasso,main="Lasso Model Cross-Validation Fit")
model.ridge <- cv.glmnet(x.train,y.train,alpha = 0,type.measure ="mse")
model.ridge.predict<-predict(model.ridge,x.test)
model.ridge.MSE<-mse(y.test,model.ridge.predict)
plot(model.ridge,main="Ridge Model Cross-Validation Fit")
MSE <- c(model.np.MSE,model.elnet.MSE,model.lasso.MSE,model.ridge.MSE)
Penalty <- c("None","Lasso","Elastic Net","Ridge")
grid.table(data.frame(Penalty,MSE),rows = NULL)
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/eshanjoshi/Documents/Spring_2020/BMDS/Homeworks/hw7')
library(magrittr)
library(dplyr)
library(glmnet)
library(Metrics)
library(gridExtra)
shhs1_data <- read.delim("shhs1.txt") %>% rename(bmi=bmi_s1, age=age_s1)
lin_model <- lm(log(rdi4p+1)~waist+age+gender+bmi, data=shhs1_data)
summary(lin_model)
shhs1_data$sdb <- as.integer(shhs1_data$rdi4p>15)
sdb_model <- glm(sdb ~ waist+age+gender+bmi,family="binomial",data=shhs1_data)
summary(sdb_model)
exp(sdb_model$coeff)
htnDerv_model <- glm(HTNDerv_s1 ~ age+gender+bmi+rdi4p,family="binomial",data=shhs1_data)
summary(htnDerv_model)
exp(htnDerv_model$coeff)
shhs1_data.clean <- shhs1_data %>% na.omit()
fit.data <- shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi)  %>% data.matrix()
fit.lasso <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=1)
plot(fit.lasso,label=TRUE, xvar = "lambda")
fit.ridge <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0)
plot(fit.ridge,label=TRUE, xvar = "lambda")
fit.elnet <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0.5)
plot(fit.elnet,label=TRUE, xvar = "lambda")
train = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% sample_frac(0.75)
test = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% setdiff(train)
x.train <- train%>%select(waist,age,gender,bmi)%>%data.matrix()
x.test <- test%>%select(waist,age,gender,bmi)%>%data.matrix()
y.train <- log(train$rdi4p+1)
y.test <- log(test$rdi4p+1)
model.np<-lm(log(rdi4p+1)~waist+age+gender+bmi,data=train)
model.np.predict<-predict(model.np,test)
model.np.MSE<-mse(y.test,model.np.predict)
model.elnet <- cv.glmnet(x.train,y.train,alpha = 0.5,type.measure ="mse")
model.elnet.predict<-predict(model.elnet,x.test)
model.elnet.MSE<-mse(y.test,model.elnet.predict)
plot(model.elnet,main="Elastic Net Model Cross-Validation Fit")
model.lasso <- cv.glmnet(x.train,y.train,alpha = 1,type.measure ="mse")
model.lasso.predict<-predict(model.lasso,x.test)
model.lasso.MSE<-mse(y.test,model.lasso.predict)
plot(model.lasso,main="Lasso Model Cross-Validation Fit")
model.ridge <- cv.glmnet(x.train,y.train,alpha = 0,type.measure ="mse")
model.ridge.predict<-predict(model.ridge,x.test)
model.ridge.MSE<-mse(y.test,model.ridge.predict)
plot(model.ridge,main="Ridge Model Cross-Validation Fit")
MSE <- c(model.np.MSE,model.elnet.MSE,model.lasso.MSE,model.ridge.MSE)
Penalty <- c("None","Lasso","Elastic Net","Ridge")
grid.table(data.frame(Penalty,MSE),rows = NULL)
exp(0.0115429)
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/eshanjoshi/Documents/Spring_2020/BMDS/Homeworks/hw7')
library(magrittr)
library(dplyr)
library(glmnet)
library(Metrics)
library(gridExtra)
shhs1_data <- read.delim("shhs1.txt") %>% rename(bmi=bmi_s1, age=age_s1)
lin_model <- lm(log(rdi4p+1)~waist+age+gender+bmi, data=shhs1_data)
summary(lin_model)
shhs1_data$sdb <- as.integer(shhs1_data$rdi4p>15)
sdb_model <- glm(sdb ~ waist+age+gender+bmi,family="binomial",data=shhs1_data)
summary(sdb_model)
exp(sdb_model$coeff)
htnDerv_model <- glm(HTNDerv_s1 ~ age+gender+bmi+rdi4p,family="binomial",data=shhs1_data)
summary(htnDerv_model)
exp(htnDerv_model$coeff)
shhs1_data.clean <- shhs1_data %>% na.omit()
fit.data <- shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi)  %>% data.matrix()
fit.lasso <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=1)
plot(fit.lasso,label=TRUE, xvar = "lambda")
fit.ridge <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0)
plot(fit.ridge,label=TRUE, xvar = "lambda")
fit.elnet <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0.5)
plot(fit.elnet,label=TRUE, xvar = "lambda")
train = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% sample_frac(0.75)
test = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% setdiff(train)
x.train <- train%>%select(waist,age,gender,bmi)%>%data.matrix()
x.test <- test%>%select(waist,age,gender,bmi)%>%data.matrix()
y.train <- log(train$rdi4p+1)
y.test <- log(test$rdi4p+1)
model.np<-lm(log(rdi4p+1)~waist+age+gender+bmi,data=train)
model.np.predict<-predict(model.np,test)
model.np.MSE<-mse(y.test,model.np.predict)
model.elnet <- cv.glmnet(x.train,y.train,alpha = 0.5,type.measure ="mse")
model.elnet.predict<-predict(model.elnet,x.test)
model.elnet.MSE<-mse(y.test,model.elnet.predict)
plot(model.elnet,main="Elastic Net Model Cross-Validation Fit")
model.lasso <- cv.glmnet(x.train,y.train,alpha = 1,type.measure ="mse")
model.lasso.predict<-predict(model.lasso,x.test)
model.lasso.MSE<-mse(y.test,model.lasso.predict)
plot(model.lasso,main="Lasso Model Cross-Validation Fit")
model.ridge <- cv.glmnet(x.train,y.train,alpha = 0,type.measure ="mse")
model.ridge.predict<-predict(model.ridge,x.test)
model.ridge.MSE<-mse(y.test,model.ridge.predict)
plot(model.ridge,main="Ridge Model Cross-Validation Fit")
MSE <- c(model.np.MSE,model.elnet.MSE,model.lasso.MSE,model.ridge.MSE)
Penalty <- c("None","Lasso","Elastic Net","Ridge")
grid.table(data.frame(Penalty,MSE),rows = NULL)
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/eshanjoshi/Documents/Spring_2020/BMDS/Homeworks/hw7')
library(magrittr)
library(dplyr)
library(glmnet)
library(Metrics)
library(gridExtra)
shhs1_data <- read.delim("shhs1.txt") %>% rename(bmi=bmi_s1, age=age_s1)
lin_model <- lm(log(rdi4p+1)~waist+age+gender+bmi, data=shhs1_data)
summary(lin_model)
shhs1_data$sdb <- as.integer(shhs1_data$rdi4p>15)
sdb_model <- glm(sdb ~ waist+age+gender+bmi,family="binomial",data=shhs1_data)
summary(sdb_model)
exp(sdb_model$coeff)
htnDerv_model <- glm(HTNDerv_s1 ~ age+gender+bmi+rdi4p,family="binomial",data=shhs1_data)
summary(htnDerv_model)
exp(htnDerv_model$coeff)
shhs1_data.clean <- shhs1_data %>% na.omit()
fit.data <- shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi)  %>% data.matrix()
fit.lasso <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=1)
plot(fit.lasso,main="Lasso Model Coefficients as Penalty Varies")
fit.ridge <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0)
plot(fit.ridge,main="Ridge Regression Model Coefficients as Penalty Varies")
fit.elnet <- glmnet(fit.data[,-1],log(fit.data[,1]+1), alpha=0.5)
plot(fit.elnet,main="Elastic Net Model Coefficients as Penalty Varies")
train = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% sample_frac(0.75)
test = shhs1_data.clean %>% select(rdi4p,waist,age,gender,bmi) %>% setdiff(train)
x.train <- train%>%select(waist,age,gender,bmi)%>%data.matrix()
x.test <- test%>%select(waist,age,gender,bmi)%>%data.matrix()
y.train <- log(train$rdi4p+1)
y.test <- log(test$rdi4p+1)
model.np<-lm(log(rdi4p+1)~waist+age+gender+bmi,data=train)
model.np.predict<-predict(model.np,test)
model.np.MSE<-mse(y.test,model.np.predict)
model.elnet <- cv.glmnet(x.train,y.train,alpha = 0.5,type.measure ="mse")
model.elnet.predict<-predict(model.elnet,x.test)
model.elnet.MSE<-mse(y.test,model.elnet.predict)
plot(model.elnet,main="Elastic Net Model Cross-Validation Error")
model.lasso <- cv.glmnet(x.train,y.train,alpha = 1,type.measure ="mse")
model.lasso.predict<-predict(model.lasso,x.test)
model.lasso.MSE<-mse(y.test,model.lasso.predict)
plot(model.lasso,main="Lasso Model Cross-Validation Error")
model.ridge <- cv.glmnet(x.train,y.train,alpha = 0,type.measure ="mse")
model.ridge.predict<-predict(model.ridge,x.test)
model.ridge.MSE<-mse(y.test,model.ridge.predict)
plot(model.ridge,main="Ridge Model Cross-Validation Error")
MSE <- c(model.np.MSE,model.elnet.MSE,model.lasso.MSE,model.ridge.MSE)
Penalty <- c("None","Lasso","Elastic Net","Ridge Regression")
grid.table(data.frame(Penalty,MSE),rows = NULL)
a<-cv.glmnet(x.train,y.train,alpha = 0.5)
View(a)
log(0.002912112)
view (val)
View(val)
source('~/Documents/bims/scripts/master9_glm_classification.R', echo=TRUE)
setwd(~/Documents/bims/scripts)
setwd("~/Documents/bims/scripts")
source('~/Documents/bims/scripts/master9_glm_classification.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(caret)
source("../functions/generateRootDir.R")
get_auc_info <- function(list_of_preds){
return (lapply(c(2:7), function(y) {
lapply(seq_along(list_of_preds[[1]]), function(x) {
cvAUC(list(na.omit(list_of_preds[[1]][[x]])[[y]],
na.omit(list_of_preds[[2]][[x]])[[y]],
na.omit(list_of_preds[[3]][[x]])[[y]],
na.omit(list_of_preds[[4]][[x]])[[y]],
na.omit(list_of_preds[[5]][[x]])[[y]]),
list(na.omit(list_of_preds[[1]][[x]])$ground_truth,
na.omit(list_of_preds[[2]][[x]])$ground_truth,
na.omit(list_of_preds[[3]][[x]])$ground_truth,
na.omit(list_of_preds[[4]][[x]])$ground_truth,
na.omit(list_of_preds[[5]][[x]])$ground_truth))})
}))
}
## [[1]]:bp_pred [[2]]:fe_pred [[3]]:fp_pred [[4]]:mf_pred [[5]]:sm_pred [[6]]:wv_pred
get_auc_plots <- function(plot_info){
filePath = paste0("../",generateRootDir(paste0(deparse(substitute(plot_info)),"/")))
dir.create(filePath, recursive=TRUE,showWarnings = FALSE)
color_choice = c('red','blue4','green','purple','pink','cyan2')
val<-names(plot_info[[1]])
lapply(c(1:6), function(y) {
png(paste0(filePath,val[y],".png"))
lapply(seq_along(plot_info), function(x) {
plot(plot_info[[x]][[y]]$perf, col="grey", lty=3)
plot(plot_info[[x]][[y]]$perf, avg="vertical",col=color_choice[x], lwd=2, add=TRUE)
par(new=TRUE)
})
legend("bottomright", legend=c("bp_pred", "fe_pred","fp_pred", "mf_pred","sm_pred", "wv_pred"),fill=color_choice,cex=0.75)
title(val[y])
dev.off()
})
}
self_dis<-get_auc_info(self_val_predictionsDis)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(caret)
library(cvAUC)
source("../functions/generateRootDir.R")
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(caret)
library(cvAUC)
source("../functions/generateRootDir.R")
get_auc_info <- function(list_of_preds){
return (lapply(c(2:7), function(y) {
lapply(seq_along(list_of_preds[[1]]), function(x) {
cvAUC(list(na.omit(list_of_preds[[1]][[x]])[[y]],
na.omit(list_of_preds[[2]][[x]])[[y]],
na.omit(list_of_preds[[3]][[x]])[[y]],
na.omit(list_of_preds[[4]][[x]])[[y]],
na.omit(list_of_preds[[5]][[x]])[[y]]),
list(na.omit(list_of_preds[[1]][[x]])$ground_truth,
na.omit(list_of_preds[[2]][[x]])$ground_truth,
na.omit(list_of_preds[[3]][[x]])$ground_truth,
na.omit(list_of_preds[[4]][[x]])$ground_truth,
na.omit(list_of_preds[[5]][[x]])$ground_truth))})
}))
}
## [[1]]:bp_pred [[2]]:fe_pred [[3]]:fp_pred [[4]]:mf_pred [[5]]:sm_pred [[6]]:wv_pred
get_auc_plots <- function(plot_info){
filePath = paste0("../",generateRootDir(paste0(deparse(substitute(plot_info)),"/")))
dir.create(filePath, recursive=TRUE,showWarnings = FALSE)
color_choice = c('red','blue4','green','purple','pink','cyan2')
val<-names(plot_info[[1]])
lapply(c(1:6), function(y) {
png(paste0(filePath,val[y],".png"))
lapply(seq_along(plot_info), function(x) {
plot(plot_info[[x]][[y]]$perf, col="grey", lty=3)
plot(plot_info[[x]][[y]]$perf, avg="vertical",col=color_choice[x], lwd=2, add=TRUE)
par(new=TRUE)
})
legend("bottomright", legend=c("bp_pred", "fe_pred","fp_pred", "mf_pred","sm_pred", "wv_pred"),fill=color_choice,cex=0.75)
title(val[y])
dev.off()
})
}
self_dis<-get_auc_info(self_val_predictionsDis)
get_auc_plots(self_dis)
self_12mo<-get_auc_info(self_val_predictions12mo)
get_auc_plots(self_12mo)
test_dis<-get_auc_info(test_val_predictionsDis)
get_auc_plots(test_dis)
test_12mo<-get_auc_info(test_val_predictions12mo)
get_auc_plots(test_12mo)
names(self_12mo[[1]])
names(self_12mo[[2]])
names(self_12mo[[1]][[1]])
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(caret)
library(cvAUC)
source("../functions/generateRootDir.R")
get_auc_info <- function(list_of_preds){
return (lapply(c(2:7), function(y) {
lapply(seq_along(list_of_preds[[1]]), function(x) {
cvAUC(list(na.omit(list_of_preds[[1]][[x]])[[y]],
na.omit(list_of_preds[[2]][[x]])[[y]],
na.omit(list_of_preds[[3]][[x]])[[y]],
na.omit(list_of_preds[[4]][[x]])[[y]],
na.omit(list_of_preds[[5]][[x]])[[y]]),
list(na.omit(list_of_preds[[1]][[x]])$ground_truth,
na.omit(list_of_preds[[2]][[x]])$ground_truth,
na.omit(list_of_preds[[3]][[x]])$ground_truth,
na.omit(list_of_preds[[4]][[x]])$ground_truth,
na.omit(list_of_preds[[5]][[x]])$ground_truth))})
}))
}
## [[1]]:bp_pred [[2]]:fe_pred [[3]]:fp_pred [[4]]:mf_pred [[5]]:sm_pred [[6]]:wv_pred
get_auc_plots <- function(plot_info, auc_info){
filePath = paste0("../",generateRootDir(paste0(deparse(substitute(plot_info)),"/")))
dir.create(filePath, recursive=TRUE,showWarnings = FALSE)
color_choice = c('red','blue4','green','purple','pink','cyan2')
val<-names(auc_info[[1]])
lapply(c(1:6), function(y) {
png(paste0(filePath,val[y],".png"))
lapply(seq_along(plot_info), function(x) {
plot(plot_info[[x]][[y]]$perf, col="grey", lty=3)
plot(plot_info[[x]][[y]]$perf, avg="vertical",col=color_choice[x], lwd=2, add=TRUE)
par(new=TRUE)
})
legend("bottomright", legend=c("bp_pred", "fe_pred","fp_pred", "mf_pred","sm_pred", "wv_pred"),fill=color_choice,cex=0.75)
title(val[y])
dev.off()
})
}
self_dis<-get_auc_info(self_val_predictionsDis)
get_auc_plots(self_dis,self_val_predictionsDis)
self_12mo<-get_auc_info(self_val_predictions12mo)
get_auc_plots(self_12mo,self_val_predictions12mo)
test_dis<-get_auc_info(test_val_predictionsDis)
get_auc_plots(test_dis,test_val_predictionsDis)
test_12mo<-get_auc_info(test_val_predictions12mo)
get_auc_plots(test_12mo,test_val_predictions12mo)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(caret)
library(cvAUC)
source("../functions/generateRootDir.R")
get_auc_info <- function(list_of_preds){
return (lapply(c(2:7), function(y) {
lapply(seq_along(list_of_preds[[1]]), function(x) {
cvAUC(list(na.omit(list_of_preds[[1]][[x]])[[y]],
na.omit(list_of_preds[[2]][[x]])[[y]],
na.omit(list_of_preds[[3]][[x]])[[y]],
na.omit(list_of_preds[[4]][[x]])[[y]],
na.omit(list_of_preds[[5]][[x]])[[y]]),
list(na.omit(list_of_preds[[1]][[x]])$ground_truth,
na.omit(list_of_preds[[2]][[x]])$ground_truth,
na.omit(list_of_preds[[3]][[x]])$ground_truth,
na.omit(list_of_preds[[4]][[x]])$ground_truth,
na.omit(list_of_preds[[5]][[x]])$ground_truth))})
}))
}
## [[1]]:bp_pred [[2]]:fe_pred [[3]]:fp_pred [[4]]:mf_pred [[5]]:sm_pred [[6]]:wv_pred
get_auc_plots <- function(plot_info, auc_info){
filePath = paste0("../",generateRootDir(paste0(deparse(substitute(plot_info)),"/")))
dir.create(filePath, recursive=TRUE,showWarnings = FALSE)
color_choice = c('red','blue4','green','purple','pink','cyan2')
val<-names(auc_info[[1]])
lapply(c(1:6), function(y) {
png(paste0(filePath,val[y],".png"))
lapply(seq_along(plot_info), function(x) {
plot(plot_info[[x]][[y]]$perf, col="grey", lty=3)
plot(plot_info[[x]][[y]]$perf, avg="vertical",col=color_choice[x], lwd=2, add=TRUE)
par(new=TRUE)
})
legend("bottomright", legend=c("bp_pred", "fe_pred","fp_pred", "mf_pred","sm_pred", "wv_pred"),fill=color_choice,cex=0.75)
title(val[y])
dev.off()
})
}
self_dis<-get_auc_info(self_val_predictionsDis)
get_auc_plots(self_dis,self_val_predictionsDis)
self_12mo<-get_auc_info(self_val_predictions12mo)
get_auc_plots(self_12mo,self_val_predictions12mo)
test_dis<-get_auc_info(test_val_predictionsDis)
get_auc_plots(test_dis,test_val_predictionsDis)
test_12mo<-get_auc_info(test_val_predictions12mo)
get_auc_plots(test_12mo,test_val_predictions12mo)
