viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Freq Entropy GOSE at 1 year") +
labs(color = "GOSE_yr")
ggplotly(viz)
# freq_pairs
data <- data.frame(x1=freq_pairsLOL_GOSE_1yr$Xr[,1], x2=freq_pairsLOL_GOSE_1yr$Xr[,2],x3=freq_pairsLOL_GOSE_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Freq Pairs GOSE at 1 year") +
labs(color = "GOSE_yr")
ggplotly(viz)
# med_freq
data <- data.frame(x1=med_freqLOL_GOSE_1yr$Xr[,1], x2=med_freqLOL_GOSE_1yr$Xr[,2],x3=med_freqLOL_GOSE_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Med Freq GOSE at 1 year") +
labs(color = "GOSE_yr")
ggplotly(viz)
# sma
data <- data.frame(x1=smaLOL_GOSE_1yr$Xr[,1], x2=smaLOL_GOSE_1yr$Xr[,2],x3=smaLOL_GOSE_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("SMA GOSE at 1 year") +
labs(color = "GOSE_yr")
ggplotly(viz)
# wavelets
data <- data.frame(x1=waveletsLOL_GOSE_1yr$Xr[,1], x2=waveletsLOL_GOSE_1yr$Xr[,2],x3=waveletsLOL_GOSE_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Wavelets GOSE at 1 year") +
labs(color = "GOSE_yr")
ggplotly(viz)
## Mortality at Discharge
# band_power
Y<-PYpatient_table$Death
Y<-Y[!is.na(Y)]
data <- data.frame(x1=band_powerLOL_Death$Xr[,1], x2=band_powerLOL_Death$Xr[,2],x3=band_powerLOL_Death$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Band Power Mortality at Discharge") +
labs(color = "Death_dis")
ggplotly(viz)
# freq_entropy
data <- data.frame(x1=freq_entropyLOL_Death$Xr[,1], x2=freq_entropyLOL_Death$Xr[,2],x3=freq_entropyLOL_Death$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Freq Entropy Mortality at Discharge") +
labs(color = "Death_dis")
ggplotly(viz)
# freq_pairs
data <- data.frame(x1=freq_pairsLOL_Death$Xr[,1], x2=freq_pairsLOL_Death$Xr[,2],x3=freq_pairsLOL_Death$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Freq Pairs Mortality at Discharge") +
labs(color = "Death_dis")
ggplotly(viz)
# med_freq
data <- data.frame(x1=med_freqLOL_Death$Xr[,1], x2=med_freqLOL_Death$Xr[,2],x3=med_freqLOL_Death$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Med Freq Mortality at Discharge") +
labs(color = "Death_dis")
ggplotly(viz)
# sma
data <- data.frame(x1=smaLOL_Death$Xr[,1], x2=smaLOL_Death$Xr[,2],x3=smaLOL_Death$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("SMA Mortality at Discharge") +
labs(color = "Death_dis")
ggplotly(viz)
# wavelets
data <- data.frame(x1=waveletsLOL_Death$Xr[,1], x2=waveletsLOL_Death$Xr[,2],x3=waveletsLOL_Death$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Wavelets Mortality at Discharge") +
labs(color = "Death_dis")
ggplotly(viz)
## Mortality within 1 Year of Discharge
# band_power
Y<-PYpatient_table$Death_1yr
Y<-Y[!is.na(Y)]
data <- data.frame(x1=band_powerLOL_Death_1yr$Xr[,1], x2=band_powerLOL_Death_1yr$Xr[,2],x3=band_powerLOL_Death_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Band Power Mortality within 1 Year") +
labs(color = "Death_yr")
ggplotly(viz)
# freq_entropy
data <- data.frame(x1=freq_entropyLOL_Death_1yr$Xr[,1], x2=freq_entropyLOL_Death_1yr$Xr[,2],x3=freq_entropyLOL_Death_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Freq Entropy Mortality within 1 Year") +
labs(color = "Death_yr")
ggplotly(viz)
# freq_pairs
data <- data.frame(x1=freq_pairsLOL_Death_1yr$Xr[,1], x2=freq_pairsLOL_Death_1yr$Xr[,2],x3=freq_pairsLOL_Death_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Freq Pairs Mortality within 1 Year") +
labs(color = "Death_yr")
ggplotly(viz)
# med_freq
data <- data.frame(x1=med_freqLOL_Death_1yr$Xr[,1], x2=med_freqLOL_Death_1yr$Xr[,2],x3=med_freqLOL_Death_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Med Freq Mortality within 1 Year") +
labs(color = "Death_yr")
ggplotly(viz)
# sma
data <- data.frame(x1=smaLOL_Death_1yr$Xr[,1], x2=smaLOL_Death_1yr$Xr[,2],x3=smaLOL_Death_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("SMA Mortality within 1 Year") +
labs(color = "Death_yr")
ggplotly(viz)
# wavelets
data <- data.frame(x1=waveletsLOL_Death_1yr$Xr[,1], x2=waveletsLOL_Death_1yr$Xr[,2],x3=waveletsLOL_Death_1yr$Xr[,3],y=Y)
viz<-ggplot(data, aes(x=x1, y=x2, color=y)) +
geom_point() +
xlab("Projection 1") +
ylab("Projection 2") +
ggtitle("Wavelets Mortality within 1 Year") +
labs(color = "Death_yr")
ggplotly(viz)
Y<-PYpatient_table$GOSE
Y<-Y[!is.na(Y)]
liney<-lda(band_powerLOL_GOSE$Xr,Y)
result <- predict(liney, band_powerLOL_GOSE$Xr)
result$class
result$posterior
liney<-lda(band_powerLOL_GOSE$Xr,Y)
result <- predict(liney, band_powerLOL_GOSE$Xr)
pred<-prediction(result[,2], Y)
liney<-lda(band_powerLOL_GOSE$Xr,Y)
result <- predict(liney, band_powerLOL_GOSE$Xr)
pred<-prediction(result$posterior[,2], Y)
perf <- performance(pred,"tpr","fpr")
liney<-lda(band_powerLOL_GOSE$Xr,Y)
result <- predict(liney, band_powerLOL_GOSE$Xr)
pred<-prediction(result$posterior[,2], Y)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
result$posterior[,2]
plot(result$posterior[,2])
Y
roc
Y<-PYpatient_table$GOSE
Y<-Y[!is.na(Y)]
liney<-lda(freq_entropyLOL_GOSE$Xr,Y)
result <- predict(liney, band_powerLOL_GOSE$Xr)
pred<-prediction(result$posterior[,2], Y)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
Y<-PYpatient_table$GOSE
Y<-Y[!is.na(Y)]
liney<-lda(freq_entropyLOL_GOSE$Xr,Y)
result <- predict(liney, freq_entropyLOL_GOSE$Xr)
pred<-prediction(result$posterior[,2], Y)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(ROCR)
if(!exists("sensors")) {
sensors<-readMat('../motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
}
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available","NaN")
if(!exists("patient_table")) {
patient_table<-read.csv('../clinical_data/patient_table.csv',na.strings=c("NA","NaN", " ") )%>%replace_with_na_all(condition = ~.x %in% na_strings)%>%mutate(GOSE=factor(GOSE),GOSE_1yr=factor(GOSE_1yr),Death=factor(Death),Death_1yr=factor(Death_1yr))
}
studyPatients<-c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,66,67)
studyPatientsPY<-c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,51,46,47,48,50,52,53,54,55,56,57,59,60,61,62,63,64,65,67,68)
sortOrder<-sort(studyPatientsPY,index.return=TRUE)$ix
PYpatient_table<-patient_table[sortOrder,]
PY_1yr_patient_table<-PYpatient_table %>% drop_na(Death_1yr)
start_time <- Sys.time()
temp_var<-do.call(rbind,sensors)
#ranked_temp_var<-lapply(temp_var, function(x) t(apply(x,1,sort,decreasing = TRUE)))
#fft_temp_var<-lapply(temp_var, function(x) abs(t(mvfft(t(x)))))
band_powerFeats<-do.call(cbind,temp_var[1:6])
freq_entropyFeats<-do.call(cbind,temp_var[7:12])
freq_pairsFeats<-do.call(cbind,temp_var[13:24])
med_freqFeats<-do.call(cbind,temp_var[25:30])
smaFeats<-do.call(cbind,temp_var[31:36])
waveletsFeats<-do.call(cbind,temp_var[37:42])
end_time <- Sys.time()
end_time - start_time
# GOSE at Discharge
r<-5
Y<-PYpatient_table$GOSE
band_powerLOL_GOSE <- lol.project.lol(band_powerFeats, Y, r)
freq_entropyLOL_GOSE <- lol.project.lol(freq_entropyFeats, Y, r)
freq_pairsLOL_GOSE <- lol.project.lol(freq_pairsFeats, Y, r)
med_freqLOL_GOSE <- lol.project.lol(med_freqFeats, Y, r)
smaLOL_GOSE <- lol.project.lol(smaFeats, Y, r)
waveletsLOL_GOSE <- lol.project.lol(waveletsFeats, Y, r)
# GOSE 1 Year after Discharge
r<-5
Y<-PYpatient_table$GOSE_1yr
band_powerLOL_GOSE_1yr <- lol.project.lol(band_powerFeats[!is.na(Y),], Y[!is.na(Y)], r)
freq_entropyLOL_GOSE_1yr <- lol.project.lol(freq_entropyFeats[!is.na(Y),], Y[!is.na(Y)], r)
freq_pairsLOL_GOSE_1yr <- lol.project.lol(freq_pairsFeats[!is.na(Y),], Y[!is.na(Y)], r)
med_freqLOL_GOSE_1yr <- lol.project.lol(med_freqFeats[!is.na(Y),], Y[!is.na(Y)], r)
smaLOL_GOSE_1yr <- lol.project.lol(smaFeats[!is.na(Y),], Y[!is.na(Y)], r)
waveletsLOL_GOSE_1yr <- lol.project.lol(waveletsFeats[!is.na(Y),], Y[!is.na(Y)], r)
# Mortality at Discharge
r<-5
Y<-PYpatient_table$Death
band_powerLOL_Death <- lol.project.lol(band_powerFeats, Y, r)
freq_entropyLOL_Death <- lol.project.lol(freq_entropyFeats, Y, r)
freq_pairsLOL_Death <- lol.project.lol(freq_pairsFeats, Y, r)
med_freqLOL_Death <- lol.project.lol(med_freqFeats, Y, r)
smaLOL_Death <- lol.project.lol(smaFeats, Y, r)
waveletsLOL_Death <- lol.project.lol(waveletsFeats, Y, r)
# Mortality within 1 Year after Discharge
r<-5
Y<-PYpatient_table$Death_1yr
band_powerLOL_Death_1yr <- lol.project.lol(band_powerFeats[!is.na(Y),], Y[!is.na(Y)], r)
freq_entropyLOL_Death_1yr <- lol.project.lol(freq_entropyFeats[!is.na(Y),], Y[!is.na(Y)], r)
freq_pairsLOL_Death_1yr <- lol.project.lol(freq_pairsFeats[!is.na(Y),], Y[!is.na(Y)], r)
med_freqLOL_Death_1yr <- lol.project.lol(med_freqFeats[!is.na(Y),], Y[!is.na(Y)], r)
smaLOL_Death_1yr <- lol.project.lol(smaFeats[!is.na(Y),], Y[!is.na(Y)], r)
waveletsLOL_Death_1yr <- lol.project.lol(waveletsFeats[!is.na(Y),], Y[!is.na(Y)], r)
# band_powerLOL_GOSE <- lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
View(band_powerLOL_GOSE)
77754/6
band_powerLOL_GOSE$A
band_powerLOL_GOSE$A[,1]
loof<-band_powerLOL_GOSE$A[,1]
plot(loof)
plot(abs(loof))
liney<-lda(band_powerLOL_GOSE$Xr,PYpatient_table$GOSE)
result <- predict(liney, band_powerLOL_GOSE$Xr)
lhat <- 1 - sum(result$class == PYpatient_table$GOSE)/length(PYpatient_table$GOSE)
data <- data.frame(x1=result$x[,1], y=PYpatient_table$GOSE)
ggplot(data, aes(x=x1, fill=y)) +
geom_density(adjust=1.5, alpha=0.6) +
xlab("x1") +
ylab("Density") +
ggtitle(sprintf("LOL, LDA, L = %.2f", lhat))
View(patient_table)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
if(!exists("sensors")) {
sensors<-readMat('../motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
}
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available","NaN")
if(!exists("patient_table")) {
patient_table<-read.csv('../clinical_data/patient_table.csv',na.strings=c("NA","NaN", " ") )%>%replace_with_na_all(condition = ~.x %in% na_strings)%>%mutate(GOSE=factor(GOSE),GOSE_1yr=factor(GOSE_1yr),Death=factor(Death),Death_1yr=factor(Death_1yr))
}
studyPatients<-c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,66,67)
studyPatientsPY<-c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,51,46,47,48,50,52,53,54,55,56,57,59,60,61,62,63,64,65,67,68)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
if(!exists("sensors")) {
sensors<-readMat('../motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
}
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available","NaN")
if(!exists("patient_table")) {
patient_table<-read.csv('../clinical_data/patient_table.csv',na.strings=c("NA","NaN", " ") )%>%replace_with_na_all(condition = ~.x %in% na_strings)%>%mutate(GOSE=factor(GOSE),GOSE_1yr=factor(GOSE_1yr),Death=factor(Death),Death_1yr=factor(Death_1yr))
}
studyPatients<-c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,66,67)
studyPatientsPY<-c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,51,46,47,48,50,52,53,54,55,56,57,59,60,61,62,63,64,65,67,68)
sortOrder<-sort(studyPatientsPY,index.return=TRUE)$ix
PYpatient_table<-patient_table[sortOrder,]
PY_1yr_patient_table<-PYpatient_table %>% drop_na(Death_1yr)
start_time <- Sys.time()
temp_var<-do.call(rbind,sensors)
#ranked_temp_var<-lapply(temp_var, function(x) t(apply(x,1,sort,decreasing = TRUE)))
#fft_temp_var<-lapply(temp_var, function(x) abs(t(mvfft(t(x)))))
band_powerFeats<-do.call(cbind,temp_var[1:6])
freq_entropyFeats<-do.call(cbind,temp_var[7:12])
freq_pairsFeats<-do.call(cbind,temp_var[13:24])
med_freqFeats<-do.call(cbind,temp_var[25:30])
smaFeats<-do.call(cbind,temp_var[31:36])
waveletsFeats<-do.call(cbind,temp_var[37:42])
end_time <- Sys.time()
end_time - start_time
View(band_powerFeats)
View(PY_1yr_patient_table)
library(caret)
install.packages(caret)
install.packages('caret')
library(caret)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if (!require(lolR)) install_github('neurodata/lol', build_vignettes=TRUE, force=TRUE)
library(lolR)
library(R.matlab)
library(tidyverse)
library(ggplot2)
library(plotly)
library(naniar)
library(MASS)
library(caret)
if(!exists("sensors")) {
sensors<-readMat('../motion_feature_data/bed_corrected_imputed_complete_sensor_data.mat')$bed.corrected.sensors
}
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available","NaN")
if(!exists("patient_table")) {
patient_table<-read.csv('../clinical_data/patient_table.csv',na.strings=c("NA","NaN", " ") )%>%replace_with_na_all(condition = ~.x %in% na_strings)%>%mutate(GOSE=factor(GOSE),GOSE_1yr=factor(GOSE_1yr),Death=factor(Death),Death_1yr=factor(Death_1yr))
}
studyPatients<-c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,66,67)
studyPatientsPY<-c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,51,46,47,48,50,52,53,54,55,56,57,59,60,61,62,63,64,65,67,68)
sortOrder<-sort(studyPatientsPY,index.return=TRUE)$ix
PYpatient_table<-patient_table[sortOrder,]
PY_1yr_patient_table<-PYpatient_table %>% drop_na(Death_1yr)
temp_var<-do.call(rbind,sensors)
#ranked_temp_var<-lapply(temp_var, function(x) t(apply(x,1,sort,decreasing = TRUE)))
#fft_temp_var<-lapply(temp_var, function(x) abs(t(mvfft(t(x)))))
band_powerFeats<-do.call(cbind,temp_var[1:6])
freq_entropyFeats<-do.call(cbind,temp_var[7:12])
freq_pairsFeats<-do.call(cbind,temp_var[13:24])
med_freqFeats<-do.call(cbind,temp_var[25:30])
smaFeats<-do.call(cbind,temp_var[31:36])
waveletsFeats<-do.call(cbind,temp_var[37:42])
train.control<-trainControl(method = "cv",number = 5)
set.seed(123)
r<-3
train.control<-trainControl(method = "cv",number = 5)
View(train.control)
lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
set.seed(123)
Y<-PYpatient_table$GOSE
r<-3
lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
set.seed(123)
Y<-PYpatient_table$GOSE
r<-3
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
View(yoyoyo)
set.seed(123)
Y<-PYpatient_table$GOSE
r<-5
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
View(yoyoyo)
set.seed(123)
Y<-PYpatient_table$GOSE
r<-5
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
set.seed(123)
Y<-PYpatient_table$GOSE
r<-5
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=isinteger(5))
set.seed(123)
Y<-PYpatient_table$GOSE
r<-5
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=as.integer(5))
set.seed(123)
Y<-PYpatient_table$GOSE
r<-5
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
View(yoyoyo)
set.seed(123)
Y<-PYpatient_table$GOSE
r<-5
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k='loo')
View(yoyoyo)
yooki<-result <- lol.xval.optimal_dimselect(band_powerFeats, Y, rs=c(2, 3, 5), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k='loo')
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
yooki<-result <- lol.xval.optimal_dimselect(band_powerFeats, Y, rs=c(2, 3, 5), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=5)
ggplot(result$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
yooki<-result <- lol.xval.optimal_dimselect(band_powerFeats, Y, rs=c(2, 3, 5), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=5)
yooki<- lol.xval.optimal_dimselect(band_powerFeats, Y, rs=c(2, 3, 5), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=5)
ggplot(yooki$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
View(yooki)
yooki<- lol.xval.optimal_dimselect(freq_entropyFeats, Y, rs=c(2, 3, 5), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=5)
ggplot(yooki$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
yooki<- lol.xval.optimal_dimselect(cbind(PYpatient_table$Age,freq_entropyFeats), Y, rs=c(2, 3, 5), alg = lol.project.lol, alg.return="A",
classifier=MASS::lda, classifier.return="class", k=5)
yooki<- lol.xval.optimal_dimselect(cbind(PYpatient_table$Age,PYpatient_table$GCS_en,freq_entropyFeats), Y, rs=c(2, 3, 5), alg = lol.project.lol, alg.return="A",classifier=MASS::lda, classifier.return="class", k=5)
ggplot(yooki$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
yooki<- lol.xval.optimal_dimselect(cbind(PYpatient_table$Age,PYpatient_table$GCS_en), Y, rs=c(2, 3, 5), alg = lol.project.lol, alg.return="A",classifier=MASS::lda, classifier.return="class", k=5)
yooki<- lol.xval.optimal_dimselect(cbind(PYpatient_table$Age,PYpatient_table$GCS_en), Y, rs=c(2), alg = lol.project.lol, alg.return="A",classifier=MASS::lda, classifier.return="class", k=5)
ggplot(yooki$foldmeans.data, aes(x=r, y=lhat)) +
geom_line() +
xlab("Embedding Dimensions, r") +
ylab("Misclassification Rate, L") +
ggtitle("Impact on Misclassification Rate of Embedding Dimension")
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
View(yoyoyo)
View(yoyoyo[["classifier"]][["call"]][["x"]])
View(yoyoyo[["model"]][["Xr"]])
View(yoyoyo[["classifier"]][["means"]])
write.csv(band_powerFeats, file = './yoopy.csv', row.names = FALSE,col.names = FALSE)
View(band_powerFeats)
`colnames(band_powerFeats)<-NULL
NULL
colnames(band_powerFeats)<-NULL
View(band_powerFeats)
set.seed(123)
Y<-PYpatient_table$GOSE
r<-5
yoyoyo<-lol.xval.eval(band_powerFeats, Y, r, alg = lol.project.lol, alg.return="A", classifier=MASS::lda, classifier.return="class", k=5)
yooki<- lol.xval.optimal_dimselect(cbind(PYpatient_table$Age,PYpatient_table$GCS_en), Y, rs=c(2), alg = lol.project.lol, alg.return="A",classifier=MASS::lda, classifier.return="class", k=5)
View(yoyoyo)
View(yoyoyo[["classifier"]][["means"]])
View(yoyoyo[["classifier"]][["call"]])
install.packages('cvAUC')
library(cvAUC)
data(ROCR.hiv)
attach(ROCR.hiv)
out <- cvAUC(hiv.svm$predictions, hiv.svm$labels)
#Plot fold AUCs
plot(out$perf, col="grey82", lty=3, main="10-fold CV AUC")
#Plot CV AUC
plot(out$perf, col="red", avg="vertical", add=TRUE)
View(ROCR.hiv)
View(out)
#Plot fold AUCs
plot(out$perf, col="grey82", lty=3, main="5-fold CV AUC")
data(ROCR.hiv)
attach(ROCR.hiv)
out <- cvAUC(hiv.svm$predictions, hiv.svm$labels)
#Plot fold AUCs
plot(out$perf, col="grey82", lty=3, main="5-fold CV AUC")
#Plot CV AUC
plot(out$perf, col="red", avg="vertical", add=TRUE)
View(ROCR.hiv)
plot(PYpatient_table$GCS_en, col="red", avg="vertical", add=TRUE)
data(ROCR.hiv)
attach(ROCR.hiv)
out <- cvAUC(hiv.svm$predictions, hiv.svm$labels)
#Plot fold AUCs
plot(out$perf, col="grey82", lty=3, main="5-fold CV AUC")
#Plot CV AUC
plot(out$perf, col="red", avg="vertical", add=TRUE)
plot(PYpatient_table$GCS_en, col="red", avg="vertical", add=TRUE)
View(out)
