# worldcountry$name<-correct_world_names(worldcountry$name)
#
# mutualCountries <- worldcountry$name[worldcountry$name %in% covidData$Country.Region]
# advisoryFiltData <- filter(covidData,Country.Region %in% mutualCountries)
# #
# qpal <- colorFactor("YlOrRd", (as.factor(advisoryFiltData$Advisory.Level)))
# polygons = worldcountry[worldcountry$name %in% covidData$Country.Region, ]
basemap<-leaflet(data = covidData,options = leafletOptions(minZoom = 2, maxZoom = 8)) %>%
addProviderTiles(provider = providers$CartoDB.Positron)%>% addLayersControl(position = "bottomright",overlayGroups = c("Active", "Confirmed", "Recovered", "Deaths"),options = layersControlOptions(collapsed = FALSE))%>% hideGroup(c("Confirmed", "Recovered", "Deaths")) %>%setView(lng = -92 ,lat=26,zoom = 3) %>% setMaxBounds(lng1 = -180,lat1 = -90,lng2 = 180,lat2 =90) %>%
#addLegend("bottomright", pal = qpal, values = ~(as.factor(advisoryFiltData$Advisory.Level)), title = "<small>US DOS Travel Advisory Level</small>")%>%
addCircleMarkers(data = covidData,radius=~log(Active),lng = ~Longitude,lat = ~Latitude,weight = ~(Active)**(1/3),color = "#662506",label = produce_labels(covidData),labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),textsize = "15px", direction = "auto"),group = "Active")
#%>%addPolygons(data=polygons,stroke = F, smoothFactor = 0.1, fillOpacity = 1, fillColor = ~qpal(as.factor(as.factor(advisoryFiltData$Advisory.Level))))
#
%>% addCircleMarkers(data = covidData,radius=~log(Confirmed),lng = ~Longitude,lat = ~Latitude,weight = ~(Confirmed)**(1/3),color = "#cc4c02",label = produce_labels(covidData),labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),textsize = "15px", direction = "auto"),group = "Confirmed")%>%
addCircleMarkers(data = covidData,radius=~log(Recovered),lng = ~Longitude,lat = ~Latitude,weight = ~(Recovered)**(1/3),color = "#045a8d",label = produce_labels(covidData),labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),textsize = "15px", direction = "auto"),group = "Recovered")%>%
addCircleMarkers(data = covidData,radius=~log(Deaths),lng = ~Longitude,lat = ~Latitude,weight = ~(Recovered)**(1/3),color = "#4d004b",label = produce_labels(covidData),labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),textsize = "15px", direction = "auto"),group = "Deaths")%>%
addLayersControl(position = "bottomright",overlayGroups = c("Active", "Confirmed", "Recovered", "Deaths"),options = layersControlOptions(collapsed = FALSE))%>%
hideGroup(c("Confirmed", "Recovered", "Deaths"))
# # #
# # %>%addPolygons(data=polygons,stroke = F, smoothFactor = 0.1, fillOpacity = 1, fillColor = ~qpal(as.factor(as.factor(advisoryFiltData$Advisory.Level))))
#
#
basemap
library()
library(reticulate)
install.packages(reticulate)
install.packages('reticulate')
library(reticulate)
repl_python()
y
x=3
exit
py$x
setwd('C:/Users/Shubhayu/OneDrive - Johns Hopkins/Shubhayu_Projects/Johns Hopkins University/ICU Motion Study/bims/scripts')
library(devtools)
if (!require(lolR))
install_github('neurodata/lol',
build_vignettes = TRUE,
force = TRUE)
library(lolR)
library(R.matlab)
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(forcats)
library(readxl)
library(plotly)
library(naniar)
library(MASS)
library(glmnet)
library(caret)
library(kernlab)
library(rlist)
library(nnet)
library(e1071)
library(randomForest)
library(foreach)
source('./functions/load_patient_clinical_data.R')
source('./functions/update_clinicalVariableList.R')
source('./functions/get_motion_features.R')
source('./functions/lol_project_motion_features.R')
source("./functions/cross_val_splits.R")
source("./functions/load_tf_patient_covariates.R")
source('./functions/cv_lol_project_motion_features.R')
source('./functions/prepare_training_covariates.R')
source('./functions/prepare_testing_covariates.R')
source('./functions/classification_function_shiny_dis.R')
source('./functions/train_caret_models.R')
source('./functions/predict_caret_models.R')
time_choice<-'tfr'
time_slide<-c(3,8)
classifier_choice<-c("svmRadialWeights","knn","lda","glmnet")
r<-3
mf_choice<-c('band_powerFeats','freq_pairsFeats')
clinicalVars<-c("APACHE", "Sex", "diag")
sensor_loc<-c("left_wr","right_wr")
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates
}
# Split for k-fold cross validation for discharge predictions:
k <- 5
cvIdx <- cross_val_splits(patient_clinical_data, k)
GOSE_predictions  <- vector(mode = "list", length = k)
fav_predictions   <- vector(mode = "list", length = k)
death_predictions <- vector(mode = "list", length = k)
for (i in 1:length(cvIdx)) {
currTestIdx <- cvIdx[[as.character(i)]]
currTrainIdx <- seq(nrow(patient_clinical_data))[-currTestIdx]
# Convert numeric to logical indexing
logicalTest <- rep(FALSE, nrow(patient_clinical_data))
logicalTest[currTestIdx] <- TRUE
logicalTrain <- !logicalTest
train_tf_covariates <- tf_covariates[currTrainIdx,]
test_tf_covariates  <- tf_covariates[currTestIdx,]
# Perform LOL on training data
# - GOSE LOL:
Y <- as.factor(patient_clinical_data$gose)
logicalIdx <- logicalTrain & !is.na(Y)
GOSE_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# - Favorable Outcome LOL:
Y <- as.factor(patient_clinical_data$favorable)
logicalIdx <- logicalTrain & !is.na(Y)
fav_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# - Mortality Outcome LOL:
Y <- as.factor(patient_clinical_data$death)
logicalIdx <- logicalTrain & !is.na(Y)
death_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# Prepare training covariates
if ("diag" %in% clinicalVars) {
clinicalVars <- c(clinicalVars[!clinicalVars %in% "diag"],"CVA","ICH","SAH","BT","SDH.TBI")
}
train_GOSE_CV <- cbind(train_tf_covariates[clinicalVars],GOSE_LOL$Xr[,1:r])
train_fav_CV  <- cbind(train_tf_covariates[clinicalVars],fav_LOL$Xr[,1:r])
train_death_CV<- cbind(train_tf_covariates[clinicalVars],death_LOL$Xr[,1:r])
colnames(train_GOSE_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(train_fav_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(train_death_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
# Prepare testing covariates
test_GOSE_CV <- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%GOSE_LOL$A[,1:r])
test_fav_CV  <- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%fav_LOL$A[,1:r])
test_death_CV<- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%death_LOL$A[,1:r])
colnames(test_GOSE_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(test_fav_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(test_death_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
# Train models on training data
Y <- as.factor(patient_clinical_data$favorable)
GOSE_models <- train_caret_models(train_GOSE_CV,Y,currTrainIdx,4,classifier_choice)
fav_models  <- train_caret_models(train_fav_CV,Y,currTrainIdx,4,classifier_choice)
Y <- as.factor(patient_clinical_data$death)
death_models  <- train_caret_models(train_death_CV,Y,currTrainIdx,4,classifier_choice)
# Predict outcomes on testing data using trained models
Y <- as.factor(patient_clinical_data$favorable)
GOSE_test_val <-predict_caret_models(GOSE_models, test_GOSE_CV, Y, currTestIdx)
fav_test_val  <-predict_caret_models(fav_models, test_fav_CV, Y, currTestIdx)
Y <- as.factor(patient_clinical_data$death)
death_test_val<-predict_caret_models(death_models, test_death_CV, Y, currTestIdx)
GOSE_predictions[[i]] <- GOSE_test_val
fav_predictions[[i]] <- fav_test_val
death_predictions[[i]] <- death_test_val
}
warnings()
View(death_predictions)
dataTable<-patient_clinical_data
k<-5
set.seed(123)
ratio<-nrow(dataTable)/k
permutation<-sample(1:nrow(dataTable))
idxV <- 1:((k-1)*(floor(ratio)))
idxV
tempList<-split(permutation[idxV], ceiling(seq_along(permutation[idxV])/floor(ratio)))
tempList
nrow(dataTable)%%k
idxV <- 1:(k*(floor(ratio)))
idxV
tempList<-split(permutation[idxV], ceiling(seq_along(permutation[idxV])/floor(ratio)))
tempList
1:nrow(dataTable)%%k
1:(nrow(dataTable)%%k)
1:(nrow(dataTable)%%k)
View(tempList)
idxV <- 1:(k*(floor(ratio)))
tempList<-split(permutation[idxV], ceiling(seq_along(permutation[idxV])/floor(ratio)))
permutation[length(permutation)]
permutation
permutation[length(permutation)-i]
i
i=1
permutation[length(permutation)+1-i]
i=2
permutation[length(permutation)+1-i]
tempList
set.seed(123)
ratio<-nrow(dataTable)/k
permutation<-sample(1:nrow(dataTable))
idxV <- 1:(k*(floor(ratio)))
tempList<-split(permutation[idxV], ceiling(seq_along(permutation[idxV])/floor(ratio)))
for (i in 1:(nrow(dataTable)%%k)){
tempList[[as.character(i)]]<-c(tempList[[as.character(i)]],permutation[length(permutation)+1-i])
}
tempList
shmoopy<-list(GOSE_predictions,fav_predictions,death_predictions)
shmoopy
View(shmoopy)
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates
}
# Split for k-fold cross validation for discharge predictions:
k <- 5
cvIdx <- cross_val_splits(patient_clinical_data, k)
GOSE_predictions  <- vector(mode = "list", length = k)
fav_predictions   <- vector(mode = "list", length = k)
death_predictions <- vector(mode = "list", length = k)
for (i in 1:length(cvIdx)) {
currTestIdx <- cvIdx[[as.character(i)]]
currTrainIdx <- seq(nrow(patient_clinical_data))[-currTestIdx]
# Convert numeric to logical indexing
logicalTest <- rep(FALSE, nrow(patient_clinical_data))
logicalTest[currTestIdx] <- TRUE
logicalTrain <- !logicalTest
train_tf_covariates <- tf_covariates[currTrainIdx,]
test_tf_covariates  <- tf_covariates[currTestIdx,]
# Perform LOL on training data
# - GOSE LOL:
Y <- as.factor(patient_clinical_data$gose)
logicalIdx <- logicalTrain & !is.na(Y)
GOSE_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# - Favorable Outcome LOL:
Y <- as.factor(patient_clinical_data$favorable)
logicalIdx <- logicalTrain & !is.na(Y)
fav_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# - Mortality Outcome LOL:
Y <- as.factor(patient_clinical_data$death)
logicalIdx <- logicalTrain & !is.na(Y)
death_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# Prepare training covariates
if ("diag" %in% clinicalVars) {
clinicalVars <- c(clinicalVars[!clinicalVars %in% "diag"],"CVA","ICH","SAH","BT","SDH.TBI")
}
train_GOSE_CV <- cbind(train_tf_covariates[clinicalVars],GOSE_LOL$Xr[,1:r])
train_fav_CV  <- cbind(train_tf_covariates[clinicalVars],fav_LOL$Xr[,1:r])
train_death_CV<- cbind(train_tf_covariates[clinicalVars],death_LOL$Xr[,1:r])
colnames(train_GOSE_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(train_fav_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(train_death_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
# Prepare testing covariates
test_GOSE_CV <- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%GOSE_LOL$A[,1:r])
test_fav_CV  <- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%fav_LOL$A[,1:r])
test_death_CV<- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%death_LOL$A[,1:r])
colnames(test_GOSE_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(test_fav_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(test_death_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
# Train models on training data
Y <- as.factor(patient_clinical_data$favorable)
GOSE_models <- train_caret_models(train_GOSE_CV,Y,currTrainIdx,4,classifier_choice)
fav_models  <- train_caret_models(train_fav_CV,Y,currTrainIdx,4,classifier_choice)
Y <- as.factor(patient_clinical_data$death)
death_models  <- train_caret_models(train_death_CV,Y,currTrainIdx,4,classifier_choice)
# Predict outcomes on testing data using trained models
Y <- as.factor(patient_clinical_data$favorable)
GOSE_test_val <-predict_caret_models(GOSE_models, test_GOSE_CV, Y, currTestIdx)
fav_test_val  <-predict_caret_models(fav_models, test_fav_CV, Y, currTestIdx)
Y <- as.factor(patient_clinical_data$death)
death_test_val<-predict_caret_models(death_models, test_death_CV, Y, currTestIdx)
GOSE_predictions[[i]] <- GOSE_test_val
fav_predictions[[i]] <- fav_test_val
death_predictions[[i]] <- death_test_val
}
outList <- list(GOSE_predictions,fav_predictions,death_predictions)
names(outList) <- c("GOSE_predictions","fav_predictions","death_predictions")
cross_val_splits <- function(dataTable,k){
set.seed(123)
ratio<-nrow(dataTable)/k
permutation<-sample(1:nrow(dataTable))
if (nrow(dataTable)%%k == 0){
return(split(permutation, ceiling(seq_along(permutation)/ratio)))
}else{
idxV <- 1:(k*(floor(ratio)))
tempList<-split(permutation[idxV], ceiling(seq_along(permutation[idxV])/floor(ratio)))
for (i in 1:(nrow(dataTable)%%k)){
tempList[[as.character(i)]]<-c(tempList[[as.character(i)]],permutation[length(permutation)+1-i])
}
return(tempList)
}
}
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates
}
# Split for k-fold cross validation for discharge predictions:
k <- 5
cvIdx <- cross_val_splits(patient_clinical_data, k)
GOSE_predictions  <- vector(mode = "list", length = k)
fav_predictions   <- vector(mode = "list", length = k)
death_predictions <- vector(mode = "list", length = k)
for (i in 1:length(cvIdx)) {
currTestIdx <- cvIdx[[as.character(i)]]
currTrainIdx <- seq(nrow(patient_clinical_data))[-currTestIdx]
# Convert numeric to logical indexing
logicalTest <- rep(FALSE, nrow(patient_clinical_data))
logicalTest[currTestIdx] <- TRUE
logicalTrain <- !logicalTest
train_tf_covariates <- tf_covariates[currTrainIdx,]
test_tf_covariates  <- tf_covariates[currTestIdx,]
# Perform LOL on training data
# - GOSE LOL:
Y <- as.factor(patient_clinical_data$gose)
logicalIdx <- logicalTrain & !is.na(Y)
GOSE_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# - Favorable Outcome LOL:
Y <- as.factor(patient_clinical_data$favorable)
logicalIdx <- logicalTrain & !is.na(Y)
fav_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# - Mortality Outcome LOL:
Y <- as.factor(patient_clinical_data$death)
logicalIdx <- logicalTrain & !is.na(Y)
death_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# Prepare training covariates
if ("diag" %in% clinicalVars) {
clinicalVars <- c(clinicalVars[!clinicalVars %in% "diag"],"CVA","ICH","SAH","BT","SDH.TBI")
}
train_GOSE_CV <- cbind(train_tf_covariates[clinicalVars],GOSE_LOL$Xr[,1:r])
train_fav_CV  <- cbind(train_tf_covariates[clinicalVars],fav_LOL$Xr[,1:r])
train_death_CV<- cbind(train_tf_covariates[clinicalVars],death_LOL$Xr[,1:r])
colnames(train_GOSE_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(train_fav_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(train_death_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
# Prepare testing covariates
test_GOSE_CV <- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%GOSE_LOL$A[,1:r])
test_fav_CV  <- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%fav_LOL$A[,1:r])
test_death_CV<- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%death_LOL$A[,1:r])
colnames(test_GOSE_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(test_fav_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(test_death_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
# Train models on training data
Y <- as.factor(patient_clinical_data$favorable)
GOSE_models <- train_caret_models(train_GOSE_CV,Y,currTrainIdx,4,classifier_choice)
fav_models  <- train_caret_models(train_fav_CV,Y,currTrainIdx,4,classifier_choice)
Y <- as.factor(patient_clinical_data$death)
death_models  <- train_caret_models(train_death_CV,Y,currTrainIdx,4,classifier_choice)
# Predict outcomes on testing data using trained models
Y <- as.factor(patient_clinical_data$favorable)
GOSE_test_val <-predict_caret_models(GOSE_models, test_GOSE_CV, Y, currTestIdx)
fav_test_val  <-predict_caret_models(fav_models, test_fav_CV, Y, currTestIdx)
Y <- as.factor(patient_clinical_data$death)
death_test_val<-predict_caret_models(death_models, test_death_CV, Y, currTestIdx)
GOSE_predictions[[i]] <- GOSE_test_val
fav_predictions[[i]] <- fav_test_val
death_predictions[[i]] <- death_test_val
}
outList <- list(GOSE_predictions,fav_predictions,death_predictions)
names(outList) <- c("GOSE_predictions","fav_predictions","death_predictions")
View(outList)
# Limit dataset to patients with 12 month information available
idx_for_12mo <- !is.na(patient_clinical_data_yr$favorable_12mo)
seq_for_12mo <- seq(62)[idx_for_12mo]
patient_clinical_data_yr<-patient_clinical_data[seq_for_12mo,]
tod_tf_covariates_yr<-tod_tf_covariates[seq_for_12mo,]
tfr_tf_covariates_yr<-tfr_tf_covariates[seq_for_12mo,]
tod_motion_features_yr<-lapply(tod_motion_features, function(x) x[seq_for_12mo,])
tfr_motion_features_yr<-lapply(tfr_motion_features, function(x) x[seq_for_12mo,])
# Limit dataset to patients with 12 month information available
idx_for_12mo <- !is.na(patient_clinical_data$favorable_12mo)
seq_for_12mo <- seq(62)[idx_for_12mo]
patient_clinical_data_yr<-patient_clinical_data[seq_for_12mo,]
tod_tf_covariates_yr<-tod_tf_covariates[seq_for_12mo,]
tfr_tf_covariates_yr<-tfr_tf_covariates[seq_for_12mo,]
tod_motion_features_yr<-lapply(tod_motion_features, function(x) x[seq_for_12mo,])
tfr_motion_features_yr<-lapply(tfr_motion_features, function(x) x[seq_for_12mo,])
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates_yr
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates_yr
}
# Split for k-fold cross validation for discharge predictions:
k <- 5
cvIdx <- cross_val_splits(patient_clinical_data_yr, k)
cvIdx
sensor_choice_Idxs <- match(sensor_loc,sensor_options)
if (time_choice == 'tod'){
sensor_idx_ranges<-lapply(tod_sensor_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tod_fp2_idx_ranges,function(x) x[tod_range >= time_slide[1] & tod_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tod_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tod_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tod_tf_covariates_yr
} else {
sensor_idx_ranges<-lapply(tfr_sensor_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
fp2_idx_ranges   <-lapply(tfr_fp2_idx_ranges,function(x) x[tfr_range >= time_slide[1] & tfr_range <= time_slide[2]])
curr_sensor_Idx<-do.call(c, sensor_idx_ranges[sensor_choice_Idxs])
curr_fp_Idx<-c(curr_sensor_Idx,do.call(c, fp2_idx_ranges[sensor_choice_Idxs]))
curr_motion_features <- lapply(tfr_motion_features_yr[mf_choice], function(x) x[,curr_sensor_Idx])
if ('freq_pairsFeats' %in% mf_choice) curr_motion_features$freq_pairsFeats <- tfr_motion_features_yr$freq_pairsFeats[,curr_fp_Idx]
curr_motion_features <- do.call(cbind,curr_motion_features)
tf_covariates <- tfr_tf_covariates_yr
}
# Split for k-fold cross validation for discharge predictions:
k <- 5
cvIdx <- cross_val_splits(patient_clinical_data_yr, k)
GOSE_predictions  <- vector(mode = "list", length = k)
fav_predictions   <- vector(mode = "list", length = k)
death_predictions <- vector(mode = "list", length = k)
for (i in 1:length(cvIdx)) {
currTestIdx <- cvIdx[[as.character(i)]]
currTrainIdx <- seq(nrow(patient_clinical_data_yr))[-currTestIdx]
# Convert numeric to logical indexing
logicalTest <- rep(FALSE, nrow(patient_clinical_data_yr))
logicalTest[currTestIdx] <- TRUE
logicalTrain <- !logicalTest
train_tf_covariates <- tf_covariates[currTrainIdx,]
test_tf_covariates  <- tf_covariates[currTestIdx,]
# Perform LOL on training data
# - GOSE LOL:
Y <- as.factor(patient_clinical_data_yr$gose_12mo)
logicalIdx <- logicalTrain & !is.na(Y)
GOSE_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# - Favorable Outcome LOL:
Y <- as.factor(patient_clinical_data_yr$favorable_12mo)
logicalIdx <- logicalTrain & !is.na(Y)
fav_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# - Mortality Outcome LOL:
Y <- as.factor(patient_clinical_data_yr$death_12mo)
logicalIdx <- logicalTrain & !is.na(Y)
death_LOL<-lol.project.lol(curr_motion_features[logicalIdx,], Y[logicalIdx], r)
# Prepare training covariates
if ("diag" %in% clinicalVars) {
clinicalVars <- c(clinicalVars[!clinicalVars %in% "diag"],"CVA","ICH","SAH","BT","SDH.TBI")
}
train_GOSE_CV <- cbind(train_tf_covariates[clinicalVars],GOSE_LOL$Xr[,1:r])
train_fav_CV  <- cbind(train_tf_covariates[clinicalVars],fav_LOL$Xr[,1:r])
train_death_CV<- cbind(train_tf_covariates[clinicalVars],death_LOL$Xr[,1:r])
colnames(train_GOSE_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(train_fav_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(train_death_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
# Prepare testing covariates
test_GOSE_CV <- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%GOSE_LOL$A[,1:r])
test_fav_CV  <- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%fav_LOL$A[,1:r])
test_death_CV<- cbind(test_tf_covariates[clinicalVars],curr_motion_features[currTestIdx,]%*%death_LOL$A[,1:r])
colnames(test_GOSE_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(test_fav_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
colnames(test_death_CV)<-c(clinicalVars,paste0(rep("MF.",r),1:r))
# Train models on training data
Y <- as.factor(patient_clinical_data_yr$favorable_12mo)
GOSE_models <- train_caret_models(train_GOSE_CV,Y,currTrainIdx,4,classifier_choice)
fav_models  <- train_caret_models(train_fav_CV,Y,currTrainIdx,4,classifier_choice)
Y <- as.factor(patient_clinical_data_yr$death_12mo)
death_models  <- train_caret_models(train_death_CV,Y,currTrainIdx,4,classifier_choice)
# Predict outcomes on testing data using trained models
Y <- as.factor(patient_clinical_data_yr$favorable_12mo)
GOSE_test_val <-predict_caret_models(GOSE_models, test_GOSE_CV, Y, currTestIdx)
fav_test_val  <-predict_caret_models(fav_models, test_fav_CV, Y, currTestIdx)
Y <- as.factor(patient_clinical_data_yr$death_12mo)
death_test_val<-predict_caret_models(death_models, test_death_CV, Y, currTestIdx)
GOSE_predictions[[i]] <- GOSE_test_val
fav_predictions[[i]] <- fav_test_val
death_predictions[[i]] <- death_test_val
}
outList <- list(GOSE_predictions,fav_predictions,death_predictions)
names(outList) <- c("GOSE_predictions","fav_predictions","death_predictions")
View(outList)
runApp('vignettes')
