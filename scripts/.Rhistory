source("functions/outliers/removeOutliers.R") # functions for removal of outliers
source("../../functions/outliers/removeOutliers.R") # functions for removal of outliers
source("../functions/outliers/removeOutliers.R") # functions for removal of outliers
registerDoMC(detectCores() - 1)
library(caret)
~
)
detectCores
detectCores()
install.packages('parallel')
library(parallel)
detectCores()
detectCores()
generateRootDir
generateRootDir()
library(beanplot)
library(readxl)
library(tidyr)
library(dplyr)
file.path
file.path?
?file.path
file.path("./Graphs",Sys.Date())
rootDir <- file.path("./Graphs",Sys.Date())
dir.create(rootDir, showWarnings = FALSE, recursive = TRUE)
directory=.
directory='.'
file.path("./Graphs",Sys.Date(),directory)
setwd('../../../bims/scripts/')
rootDir <- file.path("../plots",Sys.Date())
dir.create(rootDir, showWarnings = FALSE, recursive = TRUE)
read\
inputData<-read.csv('../clinical_data/original_patient_data.csv')
View(inputData)
continuousVariableDF <- filter(allVariablesDF, variableType %in% c("continuous", "integer"))
View(inputData)
View(inputData)
set.seed(123)
colnames(inputData)
hey<-colnames(inputData)
hey<-as.dataframe(colnames(inputData))
hey<-as.data.frame(colnames(inputData))
View(hey)
patientData<-read.csv('../clinical_data/original_patient_data.csv')
View(patientData)
clinicalVariableList<-readxl('../clinical_data/clinicalVariableList.xlsx')
library(readxl)
clinicalVariableList<-readxl('../clinical_data/clinicalVariableList.xlsx')
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
View(clinicalVariableList)
patientData<-read.csv('../clinical_data/original_patient_data.csv')
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
colnames(patientData)<-clinicalVariableList$variable
View(patientData)
sapply(patientData, class)
View(clinicalVariableList)
patientData<-read.csv('../clinical_data/original_patient_data.csv')
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
colnames(patientData)<-clinicalVariableList$variable
clinicalVariable<-mutate(clinicalVariableList,class=sapply(patientData, class))
clinicalVariable<-mutate(clinicalVariableList,class=sapply(patientData, class))
View(clinicalVariable)
patientData<-read.csv('../clinical_data/original_patient_data.csv')
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
colnames(patientData)<-clinicalVariableList$variable
clinicalVariable<-mutate(clinicalVariableList,class=sapply(patientData, class))
patientData<-read.csv('../clinical_data/original_patient_data.csv')
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
colnames(patientData)<-clinicalVariableList$variable
clinicalVariableList<-mutate(clinicalVariableList,class=sapply(patientData, class))
View(clinicalVariableList)
patientData<-read.csv('../clinical_data/original_patient_data.csv')
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
colnames(patientData)<-clinicalVariableList$variable
clinicalVariableList<-mutate(clinicalVariableList,class=sapply(patientData, class))
View(clinicalVariableList)
patientData<-read_excel('../clinical_data/Final_BIMS.xlsx')
View(patientData)
library('tidyverse')
View(patientData)
patientData<-read_excel('../clinical_data/Final_BIMS.xlsx') %>% .[, colSums(. != "") != 0]
View(patientData)
View(clinicalVariableList)
View(patientData)
patientData<-read.csv('../clinical_data/original_patient_data.csv')
View(patientData)
View(patientData)
View(patientData)
library('nanair')
install.packages('nanair')
install.packages('naniar')
library('naniar')
#### Clean Clinical Table Data  ####
library('tidyverse')
library('naniar')
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available","","NaT")
patientData<-read.csv('../clinical_data/original_patient_data.csv')%>%
replace_with_na_all(condition = ~.x %in% na_strings)
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
colnames(patientData)<-clinicalVariableList$variable
clinicalVariableList<-mutate(clinicalVariableList,class=sapply(patientData, class))
View(patientData)
#### Clean Clinical Table Data  ####
library('tidyverse')
library('naniar')
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available","","NaT","NaN")
patientData<-read.csv('../clinical_data/original_patient_data.csv')%>%
replace_with_na_all(condition = ~.x %in% na_strings)
clinicalVariableList<-read_excel('../clinical_data/clinicalVariableList.xlsx')
colnames(patientData)<-clinicalVariableList$variable
clinicalVariableList<-mutate(clinicalVariableList,class=sapply(patientData, class))
View(patientData)
View(clinicalVariableList)
View(clinicalVariableList)
View(patientData)
library('writexl')
install.packages('write.xl')
install.packages('writexl')
#### Clean Clinical Table Data  ####
library('tidyverse')
library('naniar')
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available","","NaT","NaN")
patientData<-read.csv('../clinical_data/original_patient_data.csv')%>%
replace_with_na_all(condition = ~.x %in% na_strings)
clinicalVariableList<-read.csv('../clinical_data/clinicalVariableList.csv')
colnames(patientData)<-clinicalVariableList$variable
clinicalVariableList<-mutate(clinicalVariableList,class=sapply(patientData, class))
write.csv(patientData,'../clinical_data/clean_patient_data.csv')
write.csv(clinicalVariableList,'../clinical_data/clinicalVariableList.csv')
View(clinicalVariableList)
allVariablesDF <- read.csv('../clinical_data/clinicalVariableList.csv')
View(allVariablesDF)
View(clinicalVariableList)
inputData<-read.csv('../clinical_data/patient_clinical_data.csv')
View(inputData)
inputData<-read.csv('../clinical_data/patient_clinical_data.csv')
allVariablesDF <- read.csv('../clinical_data/clinicalVariableList.csv') %>%mutate(class=sapply(inputData, class))
View(allVariablesDF)
inputData<-read.csv('../clinical_data/patient_clinical_data.csv')
allVariablesDF <- read.csv('../clinical_data/clinicalVariableList.csv') %>%mutate(class=sapply(inputData, class))
write.csv(allVariablesDF,'../clinical_data/clinicalVariableList.csv')
inputData<-read.csv('../clinical_data/patient_clinical_data.csv')
allVariablesDF <- read.csv('../clinical_data/clinicalVariableList.csv')
View(allVariablesDF)
continuousVariableDF <- filter(allVariablesDF, class %in% c("continuous", "integer"))
if (!is.null(exclusions)) {
continuousVariableDF <- continuousVariableDF[!continuousVariableDF$variableSubtitle %in% exclusions,]
}
exclusions = NULL
if (!is.null(exclusions)) {
continuousVariableDF <- continuousVariableDF[!continuousVariableDF$variableSubtitle %in% exclusions,]
}
rootDir <- generateRootDir(directory)
# Generates standardised directory for graph plotting which updates based on the date
generateRootDir <- function() {
rootDir <- file.path("../plots",Sys.Date())
dir.create(rootDir, showWarnings = FALSE, recursive = TRUE)
return(rootDir)
}
### Create Graph directory
rootDir <- generateRootDir(directory)
### Create Graph directory
rootDir <- generateRootDir()
View(inputData)
fileName <- paste(rootDir,"/age_Hist_",
Sys.Date(),
".png",
sep = "")
png(file = fileName,
width = width,
height = height,
res = 300,
pointsize = ptSize)
par(mfrow = c(1,1))
hist(inputData$age,
col = c("darkblue"),
xlab = "Age",
main = "Histogram of Age",
xlim = c(0,110),
xaxt = 'n')
fileName <- paste(rootDir,"/age_Hist_",
Sys.Date(),
".png",
sep = "")
png(file = fileName,
width = width,
height = height,
res = 300,
pointsize = ptSize)
par(mfrow = c(1,1))
hist(inputData$age,
col = c("darkblue"),
xlab = "Age",
main = "Histogram of Age",
xlim = c(0,110),
xaxt = 'n')
axis(1, at = seq(0, 120, by = 5), las=2)
dev.off()
?dev.off()
fileName <- paste(rootDir,"/age_Hist_",
Sys.Date(),
".png",
sep = "")
png(file = fileName,
width = width,
height = height,
res = 300,
pointsize = ptSize)
par(mfrow = c(1,1))
hist(inputData$age,
col = c("darkblue"),
xlab = "Age",
main = "Histogram of Age",
xlim = c(0,110),
xaxt = 'n')
axis(1, at = seq(0, 120, by = 5), las=2)
dev.off()
fileName <- paste(rootDir,"/age_Hist_",
Sys.Date(),
".png",
sep = "")
png(file = fileName,
width = width,
height = height,
res = 300,
pointsize = ptSize)
par(mfrow = c(1,1))
hist(inputData$age,
col = c("darkblue"),
xlab = "Age",
main = "Histogram of Age",
xlim = c(0,110),
xaxt = 'n')
axis(1, at = seq(0, 120, by = 5), las=2)
rootDir <- generateRootDir()
###  histogram of age
fileName <- paste(rootDir,"/age_Hist_",
Sys.Date(),
".png",
sep = "")
png(file = fileName,
width = width,
height = height,
res = 300,
pointsize = ptSize)
par(mfrow = c(1,1))
hist(inputData$age,
col = c("darkblue"),
xlab = "Age",
main = "Histogram of Age",
xlim = c(0,100),
xaxt = 'n')
axis(1, at = seq(0, 100, by = 5), las=2)
?png
rootDir <- generateRootDir()
###  histogram of age
fileName <- paste(rootDir,"/age_Hist_",
Sys.Date(),
".png",
sep = "")
png(file = fileName,
width = width,
height = height,
res = 300,
pointsize = ptSize)
par(mfrow = c(1,1))
hist(inputData$age,
col = c("darkblue"),
xlab = "Age",
main = "Histogram of Age",
xlim = c(0,100),
xaxt = 'n')
axis(1, at = seq(0, 100, by = 5), las=2)
dev.off()
barplot(table(inputData$los),
col = c("darkblue"),
ylim = c(0,50),
ylab = "Frequency",
xlab = "ICU duration (days)",
main = "Histogram of ICU duration")
barplot(table(inputData$los),
col = c("darkblue"),
ylab = "Frequency",
xlab = "ICU duration (days)",
main = "Histogram of ICU duration")
fileName <- paste(rootDir,"/icuDuration_Hist_",
Sys.Date(),
".png",
sep = "")
png(file = fileName,
width = width,
height = height,
res = 300,
pointsize = ptSize)
par(mfrow = c(1,1))
barplot(table(inputData$los),
col = c("darkblue"),
ylab = "Frequency",
xlab = "ICU duration (days)",
main = "Histogram of ICU duration")
dev.off()
setwd(fileName)
